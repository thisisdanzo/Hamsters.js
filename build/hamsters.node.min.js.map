{"version":3,"sources":["webpack:///webpack/bootstrap 2dc47da1fb365b2b216b","webpack:///./hamsters.js","webpack:///./core/version.js","webpack:///./core/habitat.js","webpack:///./core/data.js","webpack:///./core/logger.js","webpack:///./core/wheel.js","webpack:///./core/pool.js","webpack:///./core/memoizer.js"],"names":["hamstersjs","version","hamstersVersion","maxThreads","hamstersHabitat","logicalThreads","habitat","data","hamstersData","pool","hamstersPool","logger","hamstersLogger","memoizer","hamstersMemoizer","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","processStartOptions","legacy","persistence","spawnHamsters","info","habitatKeys","key","Object","keys","indexOf","toLowerCase","Worker","params","functionToRun","Promise","resolve","reject","task","scheduleTask","then","results","onSuccess","catch","error","message","onError","hamsters","module","exports","majorVersion","minorVersion","patchVersion","debug","importScripts","memoize","isLegacyEnvironment","legacyWheel","hamstersWheel","browser","isBrowser","webWorker","isWebWorker","node","isNode","reactNative","isReactNative","shell","isShell","transferrable","supportsTransferrableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isIE10","isInternetExplorer","determineGlobalThreads","locateWorkerObject","sharedWorker","locateSharedWorkerObject","selectHamsterWheel","max","navigator","hardwareConcurrency","userAgent","SharedWorker","window","RegExp","isNaN","test","process","global","isLegacy","isLegacyDevice","supportsSharedWorkers","legacyDevice","lacksWorkerSupport","legacyAgents","supports","workerBlob","generateBlob","SharedHamster","e","Uint8Array","SharedArrayBuffer","Proxy","worker","regular","generateWorkerBlob","randomArray","generateIndexes","determineSubArrayIndexes","createBlob","createDataBlob","processDataType","sortOutput","sortArray","getOutput","prepareOutput","prepareJob","prepareFunction","feedHamster","messageWorker","hamster","hamsterFood","postMessage","JSON","stringify","ie10","port","prepareTransferBuffers","buffers","buffer","push","Array","isArray","ArrayBuffer","index","threadArray","getSubArrayUsingIndex","array","hasOwnProperty","functionBody","String","startingIndex","endingIndex","length","substring","workerLogic","hamsterBlob","dataBlobURL","URL","createObjectURL","threadId","parse","arrayIndex","indexes","start","i","dataType","typedArrayFromBuffer","arr","order","prototype","sort","call","a","b","reverse","types","Uint32Array","Uint16Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","textContent","Blob","BlobMaker","locateBlobBuilder","blob","append","type","getBlob","count","Math","round","random","n","size","ceil","end","slice","subarray","logBook","warning","infoLog","warningLog","errorLog","errorFromThread","saveLogEntry","saveToLogBook","getLogEntries","fetchLogBook","createAndSaveStampedMessage","generateTimeStampedMessage","searchLogEntries","searchLogBook","timeStampedMessage","console","warn","record","Date","now","errorMessage","lineno","filename","eventType","logBookEntries","searchString","searchResults","eventTypeResults","tmpEntries","findStringInLogBook","finalResults","findStringInLogBookAllTypes","total","wheel","workerScaffold","regularScaffold","legacyScaffold","self","rtn","addEventListener","incomingConnection","ports","incomingMessage","eval","hamstersJob","prepareReturn","returnObject","onmessage","Function","setTimeout","tasks","threads","running","pending","fetchHamster","grabHamster","arguments","item","runTask","spawnHamster","id","workers","scope","hamsterWheel","newWheel","aggregate","prepareMeal","registerTask","keepTrackOfThread","trainHamster","thread","addWorkToPending","output","processQueue","shift","terminate","mergeOutputData","returnOutputAndRemoveTask","onThreadResponse","splice","checkQueueOrKillThread","processThreadOutput","onThreadError","onmessageerror","onerror","hamsterPool","maxCacheEntries","cacheEntries","itemCached","isItemCached","fetchItem","fetchItemFromCache","saveItem","saveItemToCache","input","method","fn","cacheItem","cachedResult","itemToCache","cachedItems"],"mappings":"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","file":"hamsters.node.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2dc47da1fb365b2b216b","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersVersion from './core/version';\nimport hamstersHabitat from './core/habitat';\nimport hamstersPool from './core/pool';\nimport hamstersData from './core/data';\nimport hamstersLogger from './core/logger';\nimport hamstersMemoizer from './core/memoizer';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.version = hamstersVersion;\n    this.maxThreads = hamstersHabitat.logicalThreads;\n    this.habitat = hamstersHabitat;\n    this.data = hamstersData;\n    this.pool = hamstersPool;\n    this.logger = hamstersLogger;\n    this.memoizer = hamstersMemoizer;\n    this.run = this.hamstersRun;\n    this.promise = this.hamstersPromise;\n    this.init = this.initializeLibrary;\n  }\n\n  /**\n  * @function initializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      this.processStartOptions(startOptions);\n    }\n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      hamstersPool.spawnHamsters(this.maxThreads);\n    }\n    this.logger.info(`initialized using up to ${this.maxThreads} threads.`);\n    delete this.init;\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    // Add options to override library environment behavior\n    let habitatKeys = [\n      'worker', 'sharedworker',\n      'legacy', 'webworker',\n      'reactnative', 'atomics',\n      'proxies', 'transferrable',\n      'browser', 'shell', \n      'node', 'debug',\n      'persistence', 'importscripts'\n    ];\n    let key = null;\n    for (key of Object.keys(startOptions)) {\n      if (habitatKeys.indexOf(key.toLowerCase()) !== -1) {\n        this.habitat[key] = startOptions[key];\n      } else {\n        this[key] = startOptions[key];\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    if(typeof this.habitat.Worker === 'function' && startOptions['legacy'] !== true) {\n      this.habitat.legacy = false;\n    }\n  }\n\n\n\n  /**\n  * @async\n  * @function hamstersPromise - Calls library functionality using async promises\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @return {array} Results from functionToRun.\n  */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      let task = new hamstersPool.task(params, functionToRun, this, resolve, reject);\n      hamstersPool.scheduleTask(task, this).then((results) => {\n        task.onSuccess(results);\n      }).catch((error) => {\n        hamstersLogger.error(error.message, task.onError);\n      });\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {function} onSuccess - Function to call upon successful execution\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    let task = new hamstersPool.task(params, functionToRun, this, onSuccess, onError);\n    hamstersPool.scheduleTask(task, this).then((results) => {\n      task.onSuccess(results);\n    }).catch((error) => {\n      hamstersLogger.error(error.message, task.onError);\n    });\n  }\n}\n\nvar hamsters = new hamstersjs();\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsters;\n}\n\n\n// WEBPACK FOOTER //\n// ./hamsters.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nconst majorVersion = 5;\nconst minorVersion = 1;\nconst patchVersion = 3;\nconst hamstersVersion = `${majorVersion}.${minorVersion}.${patchVersion}`;\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersVersion;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/version.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersData from './data';\nimport hamstersWheel from './wheel';\n\nclass habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.debug = false;\n    this.importScripts = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.legacy = this.isLegacyEnvironment();\n    this.legacyWheel = hamstersWheel.legacy,\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferrable = this.supportsTransferrableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE10 = !this.isNode() && !this.isReactNative() && this.isInternetExplorer(10);\n    this.logicalThreads = this.determineGlobalThreads();\n    this.Worker = this.locateWorkerObject();\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.selectHamsterWheel = this.selectHamsterWheel;\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(typeof navigator !== 'undefined') {\n      if(typeof navigator.hardwareConcurrency !== 'undefined') {\n        max = navigator.hardwareConcurrency;\n      }\n      if(max > 20 && navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n        max = 20;\n      }\n    }\n    return max;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return typeof Worker !== 'undefined' ? Worker : false;\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return typeof SharedWorker !== 'undefined' ? SharedWorker : false;\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return typeof window === \"object\";\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer(version) {\n    return (new RegExp('msie' + (!isNaN(version) ? ('\\\\s'+version) : ''), 'i').test(navigator.userAgent));\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser;\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a webworker\n  */\n  isWebWorker() {\n    return typeof importScripts === \"function\";\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is reactNative\n  */\n  isReactNative() {\n    return !this.isNode() && typeof global === 'object' && !this.browser;\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return this.browser && !this.isNode() && !this.isWebWorker() && !this.isReactNative();\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = false;\n    // Force legacy mode for known devices that don't support threading\n    if (this.browser && !this.isReactNative()) {\n      isLegacy = this.isLegacyDevice();\n    }\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy || !!!this.locateWorkerObject();\n  }\n\n  isLegacyDevice() {\n    let legacyDevice = false;\n    let userAgent = navigator.userAgent;\n    let lacksWorkerSupport = (typeof this.Worker === 'undefined');\n    let legacyAgents = ['Kindle/3.0', 'Mobile/8F190', 'IEMobile'];\n    if (lacksWorkerSupport || legacyAgents.indexOf(userAgent) !== -1) {\n      legacyDevice = true;\n    }\n    return legacyDevice;\n  }\n\n  supportsSharedWorkers() {\n    let supports = false;\n    try {\n      let workerBlob = hamstersData.generateBlob();\n      let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      supports = true;\n    } catch (e) {\n      supports = false;\n    }\n    return supports;\n  }\n\n  /**\n  * @function supportsTransferrableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferrableObjects() {\n    return typeof Uint8Array !== 'undefined';\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports shared array buffers\n  */\n  supportsAtomicOperations() {\n    return typeof SharedArrayBuffer !== 'undefined';\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports proxy objects\n  */\n  supportsProxies() {\n    return typeof Proxy !== 'undefined';\n  }\n\n  /**\n  * @function scheduleTask - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.isIE10) {\n      return './common/hamstersWheel.js';\n    }\n    if(this.reactNative) {\n      return './common/rnHamstersWheel.js';\n    }\n    if(this.webWorker) {\n      return hamstersWheel.worker;\n    }\n    if (this.node) {\n      return hamstersWheel.regular;\n    }\n    return hamstersData.generateWorkerBlob(hamstersWheel.regular);\n  }\n}\n\nvar hamstersHabitat = new habitat();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersHabitat;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/habitat.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersHabitat from './habitat';\nimport hamstersLogger from './logger';\n\nclass data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.randomArray = this.randomArray;\n    this.generateIndexes = this.determineSubArrayIndexes;\n    this.createBlob = this.createDataBlob;\n    this.generateWorkerBlob = this.generateWorkerBlob;\n    this.processDataType = this.processDataType;\n    this.sortOutput = this.sortArray;\n    this.getOutput = this.prepareOutput;\n    this.prepareJob = this.prepareFunction;\n    this.feedHamster = this.messageWorker;\n  }\n\n  /**\n  * @function messageWorker - Prepares message to send to thread\n  * @param {worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorker(hamster, hamsterFood) {\n    if(hamstersHabitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (hamstersHabitat.ie10) {\n      return hamster.postMessage(hamsterFood);\n    }\n    if (hamstersHabitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    return hamster.postMessage(hamsterFood, this.prepareTransferBuffers(hamsterFood, hamstersHabitat.transferrable));\n  }\n\n  /**\n  * @function prepareTransferBuffers - Prepares transferrable buffers for faster message passing\n  * @param {object} hamsterFood - Message to send to thread\n  */\n  prepareTransferBuffers(hamsterFood, transferrable) {\n    let buffers = [];\n    let key = null;\n    if(transferrable) {\n      for (key of Object.keys(hamsterFood)) {\n        if(hamsterFood[key].buffer) {\n          buffers.push(hamsterFood[key].buffer);\n        } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n          buffers.push(new ArrayBuffer(hamsterFood[key]));\n        }\n      }\n    }\n    return buffers;\n  }\n\n  /**\n  * @function prepareMeal - Prepares message to send to a thread and invoke execution\n  * @param {object} threadArray - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @return {object} hamsterFood - Prepared message to send to a thread\n  */\n  prepareMeal(index, task) {\n    let threadArray = this.getSubArrayUsingIndex(task.params.array, index);\n    let hamsterFood = {\n      array: threadArray\n    };\n    for (var key in task.params) {\n      if (task.params.hasOwnProperty(key) && ['array', 'threads'].indexOf(key) === -1) {\n        hamsterFood[key] = task.params[key];\n      }\n    }\n    return hamsterFood;\n  }\n\n  /**\n  * @function prepareFunction - Prepares transferrable buffers for faster message passing\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareFunction(functionBody) {\n    functionBody = String(functionBody);\n    if (!hamstersHabitat.webWorker) {\n      let startingIndex = (functionBody.indexOf(\"{\") + 1);\n      let endingIndex = (functionBody.length - 1);\n      return functionBody.substring(startingIndex, endingIndex);\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates blob uri for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    let hamsterBlob = this.createDataBlob('(' + String(workerLogic) + ')();');\n    let dataBlobURL = URL.createObjectURL(hamsterBlob);\n    return dataBlobURL;\n  }\n\n  /**\n  * @function mergeOutputData - Merges output data into data array, using indexes\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} results - Message object containing results from thread\n  */\n  mergeOutputData(task, threadId, results) {\n    var data = hamstersHabitat.reactNative ? JSON.parse(results.data) : results.data;\n    var arrayIndex = task.indexes[threadId].start; //Starting value index for subarray to merge\n    for (var i = 0; i < data.length; i++) {\n      task.params.array[arrayIndex] = data[i];\n      arrayIndex++;\n    }\n  }\n\n  /**\n  * @function processDataType - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  processDataType(dataType, buffer, transferrable) {\n    if(transferrable) {\n      return this.typedArrayFromBuffer(dataType, buffer);\n    }\n    return buffer;\n  }\n\n  /**\n  * @function prepareOutput - Prepares final task output\n  * @param {task} buffer - Task to prepare output for\n  */\n  prepareOutput(task) {\n    return task.params.array;\n  }\n\n  /**\n  * @function sortArray - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortArray(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'uint32': Uint32Array,\n      'uint16': Uint16Array,\n      'uint8': Uint8Array,\n      'uint8clamped': Uint8ClampedArray,\n      'int32': Int32Array,\n      'int16': Int16Array,\n      'int8': Int8Array,\n      'float32': Float32Array,\n      'float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return dataType;\n    }\n    return new types[dataType](buffer);\n  }\n\n\n  /**\n  * @function createDataBlob - Attempts to locate data blob builder, vender prefixes galore\n  */\n  locateBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return hamstersLogger.error('Environment does not support data blobs!');\n  }\n\n  /**\n  * @function createDataBlob - Creates new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function randomArray - Creates new random array\n  * @param {number} count - Number of random elements in array\n  * @param {function} onSuccess - onSuccess callback\n  */\n  randomArray(count, onSuccess) {\n    var randomArray = [];\n    while(count > 0) {\n      randomArray.push(Math.round(Math.random() * (100 - 1) + 1));\n      count -= 1;\n    }\n    onSuccess(randomArray);\n  }\n\n  /**\n  * @function determineSubArrayIndexes - Creates object containing starting and end value indexs for subarrays\n  * @param {array} array - Array to use\n  * @param {number} n - Number of subarrays to create indexes for\n  */\n  determineSubArrayIndexes(array, n) {\n    let i = 0;\n    let size = Math.ceil(array.length/n);\n    let indexes = [];\n    while(i < array.length) {\n      indexes.push({start: i, end: (i += size)});\n    }\n    return indexes;\n  }\n\n  /**\n  * @function getSubArrayUsingIndex - Fetches subarray from array using pre-determined start and end index\n  * @param {array} array - Array to split\n  * @param {index} object - Object containing index of start and end values for subarray\n  */\n  getSubArrayUsingIndex(array, index) {\n    if(array.slice) {\n      return array.slice(index['start'], index['end']);\n    }\n    return array.subarray(index['start'], index['end']);\n  }\n}\n\nvar hamstersData = new data();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersData;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/data.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersVersion from './version';\n\nclass logger {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.logBook = {\n      error: [], \n      warning: [], \n      info: []\n    };\n    this.info = this.infoLog;\n    this.warning = this.warningLog;\n    this.error = this.errorLog;\n    this.errorFromThread = this.errorFromThread;\n    this.saveLogEntry = this.saveToLogBook;\n    this.getLogEntries = this.fetchLogBook;\n    this.createAndSaveStampedMessage = this.generateTimeStampedMessage;\n    this.searchLogEntries = this.searchLogBook;\n  }\n\n  infoLog(message) {\n    let timeStampedMessage = this.createAndSaveStampedMessage('Info', message);\n    console.info(timeStampedMessage);\n  }\n\n  warningLog(message) {\n    let timeStampedMessage = this.createAndSaveStampedMessage('Warning', message);\n    console.warn(timeStampedMessage);\n  }\n\n  errorLog(message, reject) {\n    let timeStampedMessage = this.createAndSaveStampedMessage('Error', message);\n    console.error(timeStampedMessage);\n    if(reject) {\n      reject(timeStampedMessage);\n    } else {\n      return timeStampedMessage;\n    }\n  }\n\n  generateTimeStampedMessage(type, message) {\n    let record = `Hamsters.js v${hamstersVersion} ${type}: ${message} @ ${Date.now()}`\n    this.saveLogEntry(type.toLowerCase(), record);\n    return record;\n  }\n\n  errorFromThread(error, reject) {\n    let errorMessage = `#${error.lineno} in ${error.filename}: ${error.message}`;\n    this.errorLog(errorMessage, reject);\n  }\n\n  saveToLogBook(eventType, message) {\n    this.logBook[eventType].push(message);\n  }\n\n  fetchLogBook(eventType) {\n    if(eventType) {\n      return this.logBook[eventType];\n    }\n    return this.logBook;\n  }\n\n  findStringInLogBook(logBookEntries, searchString) {\n    let searchResults = [];\n    let i = 0;\n    for (i; i < logBookEntries.length; i++) {\n      if(logBookEntries[i].indexOf(searchString) !== -1) {\n        searchResults.push(logBookEntries[i]);\n      }\n    }\n    return searchResults;\n  }\n\n  findStringInLogBookAllTypes(logBook, searchString) {\n    let searchResults = [];\n    let key, eventTypeResults, tmpEntries = null;\n    for(key in logBook) {\n      if(logBook.hasOwnProperty(key)) {\n        tmpEntries = logBook[key];\n        eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n        for (var i = eventTypeResults.length - 1; i >= 0; i--) {\n          searchResults.push(eventTypeResults[i])\n        }\n      }\n    }\n    return searchResults;\n  }\n\n  searchLogBook(searchString, eventType) {\n    let finalResults = [];\n    if(eventType) {\n      finalResults = this.findStringInLogBook(this.logBook[eventType], searchString);\n    } else {\n      finalResults = this.findStringInLogBookAllTypes(this.logBook, searchString);\n    }\n    return {\n      total: finalResults.length,\n      results: finalResults\n    };\n  }   \n}\n\nvar hamstersLogger = new logger();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersLogger;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/logger.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nclass wheel {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.worker = this.workerScaffold;\n    this.regular = this.regularScaffold;\n    this.legacy = this.legacyScaffold;\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n  */\n  workerScaffold() {\n    'use strict';\n\n    if(typeof self === 'undefined') {\n      self = (global || window || this);\n    }\n\n    self.params = {};\n    self.rtn = {};\n\n    addEventListener('connect', (incomingConnection) => {\n      const port = incomingConnection.ports[0];\n      port.start();\n      port.addEventListener('message', (incomingMessage) => {\n        params = incomingMessage.data;\n        rtn = {\n          data: [],\n          dataType: params.dataType\n        };\n        if(params.importScripts) {\n          self.importScripts(params.importScripts);\n        }\n        eval(\"(\" + params.hamstersJob + \")\")();\n        port.postMessage(rtn);\n      }, false);\n    }, false);\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality\n  */\n  regularScaffold() {\n    'use strict';\n\n    if(typeof self === 'undefined') {\n      let self = (global || window || this);\n    }\n\n    self.params = {};\n    self.rtn = {};\n\n    function prepareReturn(returnObject) {\n      let dataType = returnObject.dataType;\n      if(dataType) {\n        returnObject.data = typedArrayFromBuffer(dataType, returnObject.data);\n      }\n      return returnObject;\n    }\n\n    function typedArrayFromBuffer(dataType, buffer) {\n      const types = {\n        'uint32': Uint32Array,\n        'uint16': Uint16Array,\n        'uint8': Uint8Array,\n        'uint8clamped': Uint8ClampedArray,\n        'int32': Int32Array,\n        'int16': Int16Array,\n        'int8': Int8Array,\n        'float32': Float32Array,\n        'float64': Float64Array\n      };\n      if (!types[dataType]) {\n        return buffer;\n      }\n      return new types[dataType](buffer);\n    }\n\n    function prepareTransferBuffers(hamsterFood) {\n      let buffers = [];\n      let key = null;\n      for (key in hamsterFood) {\n        if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n          if(hamsterFood[key].buffer) {\n            buffers.push(hamsterFood[key].buffer);\n          } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n            buffers.push(new ArrayBuffer(hamsterFood[key]));\n          }\n        }\n      }\n      return buffers;\n    }\n\n    self.onmessage = function(incomingMessage) {\n      params = incomingMessage.data;\n      rtn = {\n        data: [],\n        dataType: (params.dataType ? params.dataType.toLowerCase() : null)\n      };\n      if(params.importScripts) {\n        self.importScripts(params.importScripts);\n      }\n      new Function(params.hamstersJob)();\n      postMessage(prepareReturn(rtn), prepareTransferBuffers(rtn));\n    }\n  }\n\n  /**\n  * @function legacyScaffold - Provides library functionality for legacy devices\n  */\n  legacyScaffold(params, resolve) {\n    setTimeout(() => {\n      if(typeof self === 'undefined') {\n        var self = (global || window || this);\n      }\n      self.params = params;\n      self.rtn = {\n        data: []\n      };\n      params.hamstersJob();\n      resolve(rtn);\n    }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n  }\n};\n\nvar hamstersWheel = new wheel();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersWheel;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/wheel.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersData from './data';\nimport hamstersHabitat from './habitat';\nimport hamstersLogger from './logger';\n\nclass pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.tasks = [];\n    this.threads = [];\n    this.running = [];\n    this.pending = [];\n    this.fetchHamster = this.grabHamster;\n  }\n\n  /**\n  * @function grabHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(array, task, persistence, wheel, resolve, reject) {\n  \tthis.pending.push(arguments);\n  }\n\n  /**\n  * @function grabHamster - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueue(item, hamster) {\n  \treturn this.runTask(hamster, item[0], item[1], item[2], item[3], item[4]);\n  }\n\n  /**\n  * @function grabHamster - Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  grabHamster(threadId, habitat) {\n    if(habitat.persistence) {\n      return this.threads[threadId];\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    task.workers.push(id); //Keep track of threads scoped to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function registerTask - Adds task to execution pool based on id\n  * @param {number} id - Id of task to register\n  */\n  registerTask(id) {\n    this.tasks.push(id);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task, scope) {\n    return new Promise((resolve, reject) => {\n      let i = 0;\n      while (i < task.threads) {\n        this.hamsterWheel(i, task, scope, resolve, reject);\n        i += 1;\n      }\n    });\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    for (maxThreads; maxThreads > 0; maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} WebWorker - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    let newWheel = hamstersHabitat.selectHamsterWheel();\n    if (hamstersHabitat.webWorker) {\n      return new hamstersHabitat.SharedWorker(newWheel, 'SharedHamsterWheel');\n    }\n    return new hamstersHabitat.Worker(newWheel);\n  }\n\n  /**\n  * @constructor\n  * @function task - Constructs a new task object from provided arguments\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {object} scope - Reference to main library context\n  * @return {object} new Hamsters.js task\n  */\n  task(params, functionToRun, scope, resolve, reject) {\n    this.id = scope.pool.tasks.length;\n    this.count = 0;\n    this.aggregate = (params.aggregate || false);\n    this.workers = [];\n    this.memoize = (params.memoize || false);\n    this.dataType = (params.dataType ? params.dataType.toLowerCase() : null);\n    this.params = params;\n    // Do not modify function if we're running on the main thread for legacy fallback\n    this.threads = (scope.habitat.legacy ? 1 : (params.threads || 1));\n    this.hamstersJob = (scope.habitat.legacy ? functionToRun : hamstersData.prepareJob(functionToRun));\n    // Determine sub array indexes, precalculate ahead of time so we can pull data only when executing on a thread \n    this.indexes = hamstersData.generateIndexes(this.params.array, this.threads);\n    this.onSuccess = resolve;\n    this.onError = reject;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, task, scope, resolve, reject) {\n  \tlet threadId = this.running.length;\n    let hamsterFood = hamstersData.prepareMeal(index, task);\n    this.registerTask(task.id);\n    this.keepTrackOfThread(task, threadId);\n    if(hamstersHabitat.legacy) {\n      hamstersHabitat.legacyWheel(hamsterFood, resolve, reject);\n    } else {\n      this.trainHamster(task.count, task, hamster, scope, resolve, reject);\n      hamstersData.feedHamster(hamster, hamsterFood, scope.habitat);\n    }\n    task.count += 1; //Increment count, thread is running\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(thread, task, scope, resolve, reject) {\n    let index = task.indexes[thread];\n    if(scope.maxThreads === this.running.length) {\n      return this.addWorkToPending(index, task, scope, resolve, reject);\n    }\n    let hamster = this.grabHamster(this.running.length, scope.habitat);\n    this.runTask(hamster, index, task, scope, resolve, reject);\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    let output = hamstersData.getOutput(task);\n    if (task.sort) {\n      output = hamstersData.sortOutput(output, task.sort);\n    }\n    this.tasks[task.id] = null; //Clean up our task, not needed any longer\n    resolve({\n      data: output\n    });\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  checkQueueOrKillThread(scope, hamster) {\n    if (this.pending.length !== 0) { //If work is pending, get it started before doing heavy data merge..keep cpu busy not waiting\n      this.processQueue(this.pending.shift(), hamster);\n    } else if (!scope.habitat.persistence && !scope.habitat.webWorker) {\n      hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n    }\n  }\n\n  /**\n  * @function processThreadOutput - Handles output data from thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Internal use id for this thread\n  * @param {worker} hamster - Thread to train\n  * @param {function} resolve - onSuccess method\n  */\n  processThreadOutput(task, threadId, results, resolve) {\n    hamstersData.mergeOutputData(task, threadId, results); //Merge results into data array as the thread returns, merge immediately don't wait\n    if (task.workers.length === 0 && task.count === task.threads) { \n      this.returnOutputAndRemoveTask(task, resolve);\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(threadId, task, hamster, scope, resolve, reject) {\n    let pool = this;\n    // Handle successful response from a thread\n    function onThreadResponse(message) {\n      let results = message.data;\n      pool.running.splice(pool.running.indexOf(threadId), 1); //Remove thread from running pool\n    \ttask.workers.splice(task.workers.indexOf(threadId), 1); //Remove thread from task running pool\n      pool.checkQueueOrKillThread(scope, hamster);\n      pool.processThreadOutput(task, threadId, results, resolve);\n    }\n    // Handle error response from a thread\n    function onThreadError(error) {\n      hamstersLogger.errorFromThread(error, reject);\n    }\n    // Register on message/error handlers\n    if (hamstersHabitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = onThreadError;\n      hamster.port.onerror = onThreadError;\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = onThreadError;\n      hamster.onerror = onThreadError;\n    }\n  }\n}\n\nvar hamsterPool = new pool();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsterPool;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/pool.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nclass memoizer {\n  \n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.maxCacheEntries = 25;\n    this.cacheEntries = [];\n    this.itemCached = this.isItemCached;\n    this.fetchItem = this.fetchItemFromCache;\n    this.saveItem = this.saveItemToCache;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {object} input - Provided library execution options\n  * @param {method} functionToRun - Function to execute\n  * @return {object} Execution results from cache, or false\n  */\n  isItemCached(input, method) {\n  \treturn !!(this.fetchItem({fn: method, data: input})) || false;\n  }\n\n  /**\n  * @function fetchItemFromCache - Fetches cache item from cache\n  * @param {object} cacheItem - Cache item to fetch\n  * @return {object} CacheResults, or false\n  */\n  fetchItemFromCache(cacheItem) {\n  \tlet cachedResult = null;\n    let key = null;\n    for(key of Object.keys(this.cacheEntries)) {\n      if((cacheItem[key].fn === cacheItem.fn) && (cacheItem[key].input === cacheItem.data)) {\n        cachedResult = cacheItem[key].input;\n      }\n    }\n  \treturn cachedResult || false;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {method} functionToRun - Function to execute\n  * @param {object} data - Execution results to cache\n  */\n  saveItemToCache(method, data, maxCacheEntries) {\n  \tlet itemToCache = {\n  \t\tfn: method,\n  \t\tinput: data\n  \t};\n  \tlet cachedItems = this.cacheEntries;\n  \tif(cachedItems.length < maxCacheEntries) {\n  \t\tcachedItems.push(itemToCache);\n  \t} else {\n  \t\tcachedItems.splice(0, 0, itemToCache); \n  \t}\n  \tthis.cacheEntries = cachedItems;\n  }\n}\n\nvar hamstersMemoizer = new memoizer();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersMemoizer;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/memoizer.js"],"sourceRoot":""}