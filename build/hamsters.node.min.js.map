{"version":3,"sources":["webpack:///hamsters.node.min.js","webpack:///webpack/bootstrap 081a6979837c64ce1e42","webpack:///./core/data.js","webpack:///./core/habitat.js","webpack:///./core/logger.js","webpack:///./core/version.js","webpack:///./core/memoizer.js","webpack:///./core/pool.js","webpack:///./core/wheel.js","webpack:///./hamsters.js"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_habitat","_habitat2","_logger","_logger2","data","this","randomArray","generateIndexes","determineSubArrayIndexes","createBlob","createDataBlob","generateWorkerBlob","processDataType","sortOutput","sortArray","getOutput","prepareOutput","prepareJob","prepareFunction","feedHamster","messageWorker","value","hamster","hamsterFood","hamstersHabitat","reactNative","postMessage","JSON","stringify","ie10","webWorker","port","prepareTransferBuffers","transferrable","buffers","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","keys","Symbol","iterator","next","done","buffer","push","Array","isArray","ArrayBuffer","err","return","index","task","threadArray","getSubArrayUsingIndex","params","array","hasOwnProperty","indexOf","functionBody","String","startingIndex","endingIndex","substring","workerLogic","hamsterBlob","dataBlobURL","URL","createObjectURL","threadId","results","parse","arrayIndex","indexes","start","dataType","typedArrayFromBuffer","arr","order","sort","a","b","reverse","types","uint32","Uint32Array","uint16","Uint16Array","uint8","Uint8Array","uint8clamped","Uint8ClampedArray","int32","Int32Array","int16","Int16Array","int8","Int8Array","float32","Float32Array","float64","Float64Array","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","hamstersLogger","error","textContent","Blob","BlobMaker","locateBlobBuilder","blob","append","type","getBlob","count","onSuccess","Math","round","random","n","size","ceil","end","slice","subarray","hamstersData","_typeof","constructor","_data","_data2","_wheel","_wheel2","habitat","debug","importScripts","memoize","persistence","legacy","isLegacyEnvironment","legacyWheel","hamstersWheel","browser","isBrowser","isWebWorker","node","isNode","isReactNative","shell","isShell","supportsTransferrableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isIE10","isInternetExplorer","logicalThreads","determineGlobalThreads","Worker","locateWorkerObject","sharedWorker","locateSharedWorkerObject","selectHamsterWheel","max","navigator","hardwareConcurrency","userAgent","toLowerCase","SharedWorker","window","version","RegExp","isNaN","test","process","global","isLegacy","isLegacyDevice","supportsSharedWorkers","legacyDevice","lacksWorkerSupport","legacyAgents","supports","workerBlob","generateBlob","e","SharedArrayBuffer","Proxy","worker","regular","_version","_version2","logger","logBook","warning","info","infoLog","warningLog","errorLog","errorFromThread","saveLogEntry","saveToLogBook","getLogEntries","fetchLogBook","createAndSaveStampedMessage","generateTimeStampedMessage","searchLogEntries","searchLogBook","message","timeStampedMessage","console","warn","reject","record","hamstersVersion","Date","now","errorMessage","lineno","filename","eventType","logBookEntries","searchString","searchResults","eventTypeResults","tmpEntries","findStringInLogBook","finalResults","findStringInLogBookAllTypes","total","majorVersion","minorVersion","patchVersion","memoizer","maxCacheEntries","cacheEntries","itemCached","isItemCached","fetchItem","fetchItemFromCache","saveItem","saveItemToCache","input","method","fn","cacheItem","cachedResult","itemToCache","cachedItems","splice","hamstersMemoizer","pool","tasks","threads","running","pending","fetchHamster","grabHamster","wheel","resolve","arguments","item","runTask","spawnHamster","workers","scope","_this","Promise","hamsterWheel","maxThreads","newWheel","functionToRun","aggregate","hamstersJob","onError","createdAt","completedAt","prepareMeal","registerTask","keepTrackOfThread","trainHamster","thread","addWorkToPending","output","returnData","processQueue","shift","terminate","mergeOutputData","returnOutputAndRemoveTask","onThreadResponse","checkQueueOrKillThread","processThreadOutput","onThreadError","onmessage","onmessageerror","onerror","hamsterPool","workerScaffold","regularScaffold","legacyScaffold","self","rtn","addEventListener","incomingConnection","ports","incomingMessage","eval","prepareReturn","returnObject","Function","setTimeout","_pool","_pool2","_memoizer","_memoizer2","hamstersjs","hamstersPool","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","processStartOptions","spawnHamsters","habitatKeys","scheduleTask","then","catch","hamsters"],"mappings":"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","file":"hamsters.node.min.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(8);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _habitat = __webpack_require__(2);\n\t\n\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\n\tvar _logger = __webpack_require__(3);\n\t\n\tvar _logger2 = _interopRequireDefault(_logger);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar data = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function data() {\n\t    _classCallCheck(this, data);\n\t\n\t    this.randomArray = this.randomArray;\n\t    this.generateIndexes = this.determineSubArrayIndexes;\n\t    this.createBlob = this.createDataBlob;\n\t    this.generateWorkerBlob = this.generateWorkerBlob;\n\t    this.processDataType = this.processDataType;\n\t    this.sortOutput = this.sortArray;\n\t    this.getOutput = this.prepareOutput;\n\t    this.prepareJob = this.prepareFunction;\n\t    this.feedHamster = this.messageWorker;\n\t  }\n\t\n\t  /**\n\t  * @function messageWorker - Prepares message to send to thread\n\t  * @param {worker} hamster - Thread to message\n\t  * @param {object} hamsterFood - Message to send to thread\n\t  */\n\t\n\t\n\t  _createClass(data, [{\n\t    key: 'messageWorker',\n\t    value: function messageWorker(hamster, hamsterFood) {\n\t      if (_habitat2.default.reactNative) {\n\t        return hamster.postMessage(JSON.stringify(hamsterFood));\n\t      }\n\t      if (_habitat2.default.ie10) {\n\t        return hamster.postMessage(hamsterFood);\n\t      }\n\t      if (_habitat2.default.webWorker) {\n\t        return hamster.port.postMessage(hamsterFood);\n\t      }\n\t      return hamster.postMessage(hamsterFood, this.prepareTransferBuffers(hamsterFood, _habitat2.default.transferrable));\n\t    }\n\t\n\t    /**\n\t    * @function prepareTransferBuffers - Prepares transferrable buffers for faster message passing\n\t    * @param {object} hamsterFood - Message to send to thread\n\t    */\n\t\n\t  }, {\n\t    key: 'prepareTransferBuffers',\n\t    value: function prepareTransferBuffers(hamsterFood, transferrable) {\n\t      var buffers = [];\n\t      var key = null;\n\t      if (transferrable) {\n\t        var _iteratorNormalCompletion = true;\n\t        var _didIteratorError = false;\n\t        var _iteratorError = undefined;\n\t\n\t        try {\n\t          for (var _iterator = Object.keys(hamsterFood)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t            key = _step.value;\n\t\n\t            if (hamsterFood[key].buffer) {\n\t              buffers.push(hamsterFood[key].buffer);\n\t            } else if (Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n\t              buffers.push(new ArrayBuffer(hamsterFood[key]));\n\t            }\n\t          }\n\t        } catch (err) {\n\t          _didIteratorError = true;\n\t          _iteratorError = err;\n\t        } finally {\n\t          try {\n\t            if (!_iteratorNormalCompletion && _iterator.return) {\n\t              _iterator.return();\n\t            }\n\t          } finally {\n\t            if (_didIteratorError) {\n\t              throw _iteratorError;\n\t            }\n\t          }\n\t        }\n\t      }\n\t      return buffers;\n\t    }\n\t\n\t    /**\n\t    * @function prepareMeal - Prepares message to send to a thread and invoke execution\n\t    * @param {object} threadArray - Provided data to execute logic on\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @return {object} hamsterFood - Prepared message to send to a thread\n\t    */\n\t\n\t  }, {\n\t    key: 'prepareMeal',\n\t    value: function prepareMeal(index, task) {\n\t      var threadArray = this.getSubArrayUsingIndex(task.params.array, index);\n\t      var hamsterFood = {\n\t        array: threadArray\n\t      };\n\t      for (var key in task.params) {\n\t        if (task.params.hasOwnProperty(key) && ['array', 'threads'].indexOf(key) === -1) {\n\t          hamsterFood[key] = task.params[key];\n\t        }\n\t      }\n\t      return hamsterFood;\n\t    }\n\t\n\t    /**\n\t    * @function prepareFunction - Prepares transferrable buffers for faster message passing\n\t    * @param {function} functionBody - Message to send to thread\n\t    */\n\t\n\t  }, {\n\t    key: 'prepareFunction',\n\t    value: function prepareFunction(functionBody) {\n\t      functionBody = String(functionBody);\n\t      if (!_habitat2.default.webWorker) {\n\t        var startingIndex = functionBody.indexOf(\"{\") + 1;\n\t        var endingIndex = functionBody.length - 1;\n\t        return functionBody.substring(startingIndex, endingIndex);\n\t      }\n\t      return functionBody;\n\t    }\n\t\n\t    /**\n\t    * @function generateWorkerBlob - Creates blob uri for flexible scaffold loading\n\t    * @param {function} workerLogic - Scaffold to use within worker thread\n\t    */\n\t\n\t  }, {\n\t    key: 'generateWorkerBlob',\n\t    value: function generateWorkerBlob(workerLogic) {\n\t      var hamsterBlob = this.createDataBlob('(' + String(workerLogic) + ')();');\n\t      var dataBlobURL = URL.createObjectURL(hamsterBlob);\n\t      return dataBlobURL;\n\t    }\n\t\n\t    /**\n\t    * @function mergeOutputData - Merges output data into data array, using indexes\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {number} threadId - Internal use id for this thread\n\t    * @param {object} results - Message object containing results from thread\n\t    */\n\t\n\t  }, {\n\t    key: 'mergeOutputData',\n\t    value: function mergeOutputData(task, threadId, results) {\n\t      var data = _habitat2.default.reactNative ? JSON.parse(results.data) : results.data;\n\t      var arrayIndex = task.indexes[threadId].start; //Starting value index for subarray to merge\n\t      for (var i = 0; i < data.length; i++) {\n\t        task.params.array[arrayIndex] = data[i];\n\t        arrayIndex++;\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @function processDataType - Converts buffer into new typed array\n\t    * @param {string} dataType - Typed array type for this task\n\t    * @param {object} buffer - Buffer to convert\n\t    */\n\t\n\t  }, {\n\t    key: 'processDataType',\n\t    value: function processDataType(dataType, buffer, transferrable) {\n\t      if (transferrable) {\n\t        return this.typedArrayFromBuffer(dataType, buffer);\n\t      }\n\t      return buffer;\n\t    }\n\t\n\t    /**\n\t    * @function prepareOutput - Prepares final task output\n\t    * @param {task} buffer - Task to prepare output for\n\t    */\n\t\n\t  }, {\n\t    key: 'prepareOutput',\n\t    value: function prepareOutput(task) {\n\t      return task.params.array;\n\t    }\n\t\n\t    /**\n\t    * @function sortArray - Sorts array by defined order\n\t    * @param {object} arr - Array to sort\n\t    * @param {string} order - Defined sort order\n\t    */\n\t\n\t  }, {\n\t    key: 'sortArray',\n\t    value: function sortArray(arr, order) {\n\t      switch (order) {\n\t        case 'desc':\n\t        case 'asc':\n\t          return Array.prototype.sort.call(arr, function (a, b) {\n\t            return order === 'asc' ? a - b : b - a;\n\t          });\n\t        case 'ascAlpha':\n\t          return arr.sort();\n\t        case 'descAlpha':\n\t          return arr.reverse();\n\t        default:\n\t          return arr;\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @function typedArrayFromBuffer - Converts buffer into new typed array\n\t    * @param {string} dataType - Typed array type for this task\n\t    * @param {object} buffer - Buffer to convert\n\t    */\n\t\n\t  }, {\n\t    key: 'typedArrayFromBuffer',\n\t    value: function typedArrayFromBuffer(dataType, buffer) {\n\t      var types = {\n\t        'uint32': Uint32Array,\n\t        'uint16': Uint16Array,\n\t        'uint8': Uint8Array,\n\t        'uint8clamped': Uint8ClampedArray,\n\t        'int32': Int32Array,\n\t        'int16': Int16Array,\n\t        'int8': Int8Array,\n\t        'float32': Float32Array,\n\t        'float64': Float64Array\n\t      };\n\t      if (!types[dataType]) {\n\t        return dataType;\n\t      }\n\t      return new types[dataType](buffer);\n\t    }\n\t\n\t    /**\n\t    * @function createDataBlob - Attempts to locate data blob builder, vender prefixes galore\n\t    */\n\t\n\t  }, {\n\t    key: 'locateBlobBuilder',\n\t    value: function locateBlobBuilder() {\n\t      if (typeof BlobBuilder !== 'undefined') {\n\t        return BlobBuilder;\n\t      }\n\t      if (typeof WebKitBlobBuilder !== 'undefined') {\n\t        return WebKitBlobBuilder;\n\t      }\n\t      if (typeof MozBlobBuilder !== 'undefined') {\n\t        return MozBlobBuilder;\n\t      }\n\t      if (typeof MSBlobBuilder !== 'undefined') {\n\t        return MSBlobBuilder;\n\t      }\n\t      return _logger2.default.error('Environment does not support data blobs!');\n\t    }\n\t\n\t    /**\n\t    * @function createDataBlob - Creates new data blob from textContent\n\t    * @param {string} textContent - Provided text content for blob\n\t    */\n\t\n\t  }, {\n\t    key: 'createDataBlob',\n\t    value: function createDataBlob(textContent) {\n\t      if (typeof Blob === 'undefined') {\n\t        var BlobMaker = this.locateBlobBuilder();\n\t        var blob = new BlobMaker();\n\t        blob.append([textContent], {\n\t          type: 'application/javascript'\n\t        });\n\t        return blob.getBlob();\n\t      }\n\t      return new Blob([textContent], {\n\t        type: 'application/javascript'\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @function randomArray - Creates new random array\n\t    * @param {number} count - Number of random elements in array\n\t    * @param {function} onSuccess - onSuccess callback\n\t    */\n\t\n\t  }, {\n\t    key: 'randomArray',\n\t    value: function randomArray(count, onSuccess) {\n\t      var randomArray = [];\n\t      while (count > 0) {\n\t        randomArray.push(Math.round(Math.random() * (100 - 1) + 1));\n\t        count -= 1;\n\t      }\n\t      onSuccess(randomArray);\n\t    }\n\t\n\t    /**\n\t    * @function determineSubArrayIndexes - Creates object containing starting and end value indexs for subarrays\n\t    * @param {array} array - Array to use\n\t    * @param {number} n - Number of subarrays to create indexes for\n\t    */\n\t\n\t  }, {\n\t    key: 'determineSubArrayIndexes',\n\t    value: function determineSubArrayIndexes(array, n) {\n\t      var i = 0;\n\t      var size = Math.ceil(array.length / n);\n\t      var indexes = [];\n\t      while (i < array.length) {\n\t        indexes.push({ start: i, end: i += size });\n\t      }\n\t      return indexes;\n\t    }\n\t\n\t    /**\n\t    * @function getSubArrayUsingIndex - Fetches subarray from array using pre-determined start and end index\n\t    * @param {array} array - Array to split\n\t    * @param {index} object - Object containing index of start and end values for subarray\n\t    */\n\t\n\t  }, {\n\t    key: 'getSubArrayUsingIndex',\n\t    value: function getSubArrayUsingIndex(array, index) {\n\t      if (array.slice) {\n\t        return array.slice(index['start'], index['end']);\n\t      }\n\t      return array.subarray(index['start'], index['end']);\n\t    }\n\t  }]);\n\t\n\t  return data;\n\t}();\n\t\n\tvar hamstersData = new data();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersData;\n\t}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _data = __webpack_require__(1);\n\t\n\tvar _data2 = _interopRequireDefault(_data);\n\t\n\tvar _wheel = __webpack_require__(7);\n\t\n\tvar _wheel2 = _interopRequireDefault(_wheel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar habitat = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function habitat() {\n\t    _classCallCheck(this, habitat);\n\t\n\t    this.debug = false;\n\t    this.importScripts = null;\n\t    this.memoize = false;\n\t    this.persistence = true;\n\t    this.legacy = this.isLegacyEnvironment();\n\t    this.legacyWheel = _wheel2.default.legacy, this.browser = this.isBrowser();\n\t    this.webWorker = this.isWebWorker();\n\t    this.node = this.isNode();\n\t    this.reactNative = this.isReactNative();\n\t    this.shell = this.isShell();\n\t    this.transferrable = this.supportsTransferrableObjects();\n\t    this.atomics = this.supportsAtomicOperations();\n\t    this.proxies = this.supportsProxies();\n\t    this.isIE10 = !this.isNode() && !this.isReactNative() && this.isInternetExplorer(10);\n\t    this.logicalThreads = this.determineGlobalThreads();\n\t    this.Worker = this.locateWorkerObject();\n\t    this.sharedWorker = this.locateSharedWorkerObject();\n\t    this.selectHamsterWheel = this.selectHamsterWheel;\n\t  }\n\t\n\t  /**\n\t  * @function determineGlobalThreads - Determines max number of threads to use\n\t  */\n\t\n\t\n\t  _createClass(habitat, [{\n\t    key: 'determineGlobalThreads',\n\t    value: function determineGlobalThreads() {\n\t      var max = 4;\n\t      if (typeof navigator !== 'undefined') {\n\t        if (typeof navigator.hardwareConcurrency !== 'undefined') {\n\t          max = navigator.hardwareConcurrency;\n\t        }\n\t        if (max > 20 && navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n\t          max = 20;\n\t        }\n\t      }\n\t      return max;\n\t    }\n\t\n\t    /**\n\t    * @function locateWorkerObject - Attempts to find a global Worker object\n\t    */\n\t\n\t  }, {\n\t    key: 'locateWorkerObject',\n\t    value: function locateWorkerObject() {\n\t      return typeof Worker !== 'undefined' ? Worker : false;\n\t    }\n\t\n\t    /**\n\t    * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n\t    */\n\t\n\t  }, {\n\t    key: 'locateSharedWorkerObject',\n\t    value: function locateSharedWorkerObject() {\n\t      return typeof SharedWorker !== 'undefined' ? SharedWorker : false;\n\t    }\n\t\n\t    /**\n\t    * @function isBrowser - Detects if execution environment is a browser\n\t    */\n\t\n\t  }, {\n\t    key: 'isBrowser',\n\t    value: function isBrowser() {\n\t      return (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === \"object\";\n\t    }\n\t\n\t    /**\n\t    * @function isInternetExplorer - Detects if execution environment is internet explorer\n\t    */\n\t\n\t  }, {\n\t    key: 'isInternetExplorer',\n\t    value: function isInternetExplorer(version) {\n\t      return new RegExp('msie' + (!isNaN(version) ? '\\\\s' + version : ''), 'i').test(navigator.userAgent);\n\t    }\n\t\n\t    /**\n\t    * @function isNode - Detects if execution environment is node.js\n\t    */\n\t\n\t  }, {\n\t    key: 'isNode',\n\t    value: function isNode() {\n\t      return (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === \"object\" && \"function\" === \"function\" && !this.isWebWorker() && !this.browser;\n\t    }\n\t\n\t    /**\n\t    * @function isWebWorker - Detects if execution environment is a webworker\n\t    */\n\t\n\t  }, {\n\t    key: 'isWebWorker',\n\t    value: function isWebWorker() {\n\t      return typeof importScripts === \"function\";\n\t    }\n\t\n\t    /**\n\t    * @function isReactNative - Detects if execution environment is reactNative\n\t    */\n\t\n\t  }, {\n\t    key: 'isReactNative',\n\t    value: function isReactNative() {\n\t      return !this.isNode() && (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && !this.browser;\n\t    }\n\t\n\t    /**\n\t    * @function isShell - Detects if execution environment is a shell\n\t    */\n\t\n\t  }, {\n\t    key: 'isShell',\n\t    value: function isShell() {\n\t      return this.browser && !this.isNode() && !this.isWebWorker() && !this.isReactNative();\n\t    }\n\t\n\t    /**\n\t    * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n\t    */\n\t\n\t  }, {\n\t    key: 'isLegacyEnvironment',\n\t    value: function isLegacyEnvironment() {\n\t      var isLegacy = false;\n\t      // Force legacy mode for known devices that don't support threading\n\t      if (this.browser && !this.isReactNative()) {\n\t        isLegacy = this.isLegacyDevice();\n\t      }\n\t      // Detect sharedWorker support for use within webworkers\n\t      if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n\t        isLegacy = !this.supportsSharedWorkers();\n\t      }\n\t      return isLegacy || !!!this.locateWorkerObject();\n\t    }\n\t  }, {\n\t    key: 'isLegacyDevice',\n\t    value: function isLegacyDevice() {\n\t      var legacyDevice = false;\n\t      var userAgent = navigator.userAgent;\n\t      var lacksWorkerSupport = typeof this.Worker === 'undefined';\n\t      var legacyAgents = ['Kindle/3.0', 'Mobile/8F190', 'IEMobile'];\n\t      if (lacksWorkerSupport || legacyAgents.indexOf(userAgent) !== -1) {\n\t        legacyDevice = true;\n\t      }\n\t      return legacyDevice;\n\t    }\n\t  }, {\n\t    key: 'supportsSharedWorkers',\n\t    value: function supportsSharedWorkers() {\n\t      var supports = false;\n\t      try {\n\t        var workerBlob = _data2.default.generateBlob();\n\t        var SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n\t        supports = true;\n\t      } catch (e) {\n\t        supports = false;\n\t      }\n\t      return supports;\n\t    }\n\t\n\t    /**\n\t    * @function supportsTransferrableObjects - Detects if execution environment supports typed arrays\n\t    */\n\t\n\t  }, {\n\t    key: 'supportsTransferrableObjects',\n\t    value: function supportsTransferrableObjects() {\n\t      return typeof Uint8Array !== 'undefined';\n\t    }\n\t\n\t    /**\n\t    * @function supportsAtomicOperations - Detects if execution environment supports shared array buffers\n\t    */\n\t\n\t  }, {\n\t    key: 'supportsAtomicOperations',\n\t    value: function supportsAtomicOperations() {\n\t      return typeof SharedArrayBuffer !== 'undefined';\n\t    }\n\t\n\t    /**\n\t    * @function supportsProxies - Detects if execution environment supports proxy objects\n\t    */\n\t\n\t  }, {\n\t    key: 'supportsProxies',\n\t    value: function supportsProxies() {\n\t      return typeof Proxy !== 'undefined';\n\t    }\n\t\n\t    /**\n\t    * @function scheduleTask - Determines which scaffold to use for proper execution for various environments\n\t    */\n\t\n\t  }, {\n\t    key: 'selectHamsterWheel',\n\t    value: function selectHamsterWheel() {\n\t      if (this.isIE10) {\n\t        return './common/hamstersWheel.js';\n\t      }\n\t      if (this.reactNative) {\n\t        return './common/rnHamstersWheel.js';\n\t      }\n\t      if (this.webWorker) {\n\t        return _wheel2.default.worker;\n\t      }\n\t      if (this.node) {\n\t        return _wheel2.default.regular;\n\t      }\n\t      return _data2.default.generateWorkerBlob(_wheel2.default.regular);\n\t    }\n\t  }]);\n\t\n\t  return habitat;\n\t}();\n\t\n\tvar hamstersHabitat = new habitat();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersHabitat;\n\t}\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _version = __webpack_require__(4);\n\t\n\tvar _version2 = _interopRequireDefault(_version);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar logger = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function logger() {\n\t    _classCallCheck(this, logger);\n\t\n\t    this.logBook = {\n\t      error: [],\n\t      warning: [],\n\t      info: []\n\t    };\n\t    this.info = this.infoLog;\n\t    this.warning = this.warningLog;\n\t    this.error = this.errorLog;\n\t    this.errorFromThread = this.errorFromThread;\n\t    this.saveLogEntry = this.saveToLogBook;\n\t    this.getLogEntries = this.fetchLogBook;\n\t    this.createAndSaveStampedMessage = this.generateTimeStampedMessage;\n\t    this.searchLogEntries = this.searchLogBook;\n\t  }\n\t\n\t  _createClass(logger, [{\n\t    key: 'infoLog',\n\t    value: function infoLog(message) {\n\t      var timeStampedMessage = this.createAndSaveStampedMessage('Info', message);\n\t      console.info(timeStampedMessage);\n\t    }\n\t  }, {\n\t    key: 'warningLog',\n\t    value: function warningLog(message) {\n\t      var timeStampedMessage = this.createAndSaveStampedMessage('Warning', message);\n\t      console.warn(timeStampedMessage);\n\t    }\n\t  }, {\n\t    key: 'errorLog',\n\t    value: function errorLog(message, reject) {\n\t      var timeStampedMessage = this.createAndSaveStampedMessage('Error', message);\n\t      console.error(timeStampedMessage);\n\t      if (reject) {\n\t        reject(timeStampedMessage);\n\t      } else {\n\t        return timeStampedMessage;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'generateTimeStampedMessage',\n\t    value: function generateTimeStampedMessage(type, message) {\n\t      var record = 'Hamsters.js v' + _version2.default + ' ' + type + ': ' + message + ' @ ' + Date.now();\n\t      this.saveLogEntry(type.toLowerCase(), record);\n\t      return record;\n\t    }\n\t  }, {\n\t    key: 'errorFromThread',\n\t    value: function errorFromThread(error, reject) {\n\t      var errorMessage = '#' + error.lineno + ' in ' + error.filename + ': ' + error.message;\n\t      this.errorLog(errorMessage, reject);\n\t    }\n\t  }, {\n\t    key: 'saveToLogBook',\n\t    value: function saveToLogBook(eventType, message) {\n\t      this.logBook[eventType].push(message);\n\t    }\n\t  }, {\n\t    key: 'fetchLogBook',\n\t    value: function fetchLogBook(eventType) {\n\t      if (eventType) {\n\t        return this.logBook[eventType];\n\t      }\n\t      return this.logBook;\n\t    }\n\t  }, {\n\t    key: 'findStringInLogBook',\n\t    value: function findStringInLogBook(logBookEntries, searchString) {\n\t      var searchResults = [];\n\t      var i = 0;\n\t      for (i; i < logBookEntries.length; i++) {\n\t        if (logBookEntries[i].indexOf(searchString) !== -1) {\n\t          searchResults.push(logBookEntries[i]);\n\t        }\n\t      }\n\t      return searchResults;\n\t    }\n\t  }, {\n\t    key: 'findStringInLogBookAllTypes',\n\t    value: function findStringInLogBookAllTypes(logBook, searchString) {\n\t      var searchResults = [];\n\t      var key = void 0,\n\t          eventTypeResults = void 0,\n\t          tmpEntries = null;\n\t      for (key in logBook) {\n\t        if (logBook.hasOwnProperty(key)) {\n\t          tmpEntries = logBook[key];\n\t          eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n\t          for (var i = eventTypeResults.length - 1; i >= 0; i--) {\n\t            searchResults.push(eventTypeResults[i]);\n\t          }\n\t        }\n\t      }\n\t      return searchResults;\n\t    }\n\t  }, {\n\t    key: 'searchLogBook',\n\t    value: function searchLogBook(searchString, eventType) {\n\t      var finalResults = [];\n\t      if (eventType) {\n\t        finalResults = this.findStringInLogBook(this.logBook[eventType], searchString);\n\t      } else {\n\t        finalResults = this.findStringInLogBookAllTypes(this.logBook, searchString);\n\t      }\n\t      return {\n\t        total: finalResults.length,\n\t        results: finalResults\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return logger;\n\t}();\n\t\n\tvar hamstersLogger = new logger();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersLogger;\n\t}\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar majorVersion = 5;\n\tvar minorVersion = 1;\n\tvar patchVersion = 3;\n\tvar hamstersVersion = majorVersion + '.' + minorVersion + '.' + patchVersion;\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersVersion;\n\t}\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar memoizer = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function memoizer() {\n\t    _classCallCheck(this, memoizer);\n\t\n\t    this.maxCacheEntries = 25;\n\t    this.cacheEntries = [];\n\t    this.itemCached = this.isItemCached;\n\t    this.fetchItem = this.fetchItemFromCache;\n\t    this.saveItem = this.saveItemToCache;\n\t  }\n\t\n\t  /**\n\t  * @function isItemCached - Checks for existing data in cache\n\t  * @param {object} input - Provided library execution options\n\t  * @param {method} functionToRun - Function to execute\n\t  * @return {object} Execution results from cache, or false\n\t  */\n\t\n\t\n\t  _createClass(memoizer, [{\n\t    key: 'isItemCached',\n\t    value: function isItemCached(input, method) {\n\t      return !!this.fetchItem({ fn: method, data: input }) || false;\n\t    }\n\t\n\t    /**\n\t    * @function fetchItemFromCache - Fetches cache item from cache\n\t    * @param {object} cacheItem - Cache item to fetch\n\t    * @return {object} CacheResults, or false\n\t    */\n\t\n\t  }, {\n\t    key: 'fetchItemFromCache',\n\t    value: function fetchItemFromCache(cacheItem) {\n\t      var cachedResult = null;\n\t      var key = null;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = Object.keys(this.cacheEntries)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          key = _step.value;\n\t\n\t          if (cacheItem[key].fn === cacheItem.fn && cacheItem[key].input === cacheItem.data) {\n\t            cachedResult = cacheItem[key].input;\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      return cachedResult || false;\n\t    }\n\t\n\t    /**\n\t    * @function isItemCached - Checks for existing data in cache\n\t    * @param {method} functionToRun - Function to execute\n\t    * @param {object} data - Execution results to cache\n\t    */\n\t\n\t  }, {\n\t    key: 'saveItemToCache',\n\t    value: function saveItemToCache(method, data, maxCacheEntries) {\n\t      var itemToCache = {\n\t        fn: method,\n\t        input: data\n\t      };\n\t      var cachedItems = this.cacheEntries;\n\t      if (cachedItems.length < maxCacheEntries) {\n\t        cachedItems.push(itemToCache);\n\t      } else {\n\t        cachedItems.splice(0, 0, itemToCache);\n\t      }\n\t      this.cacheEntries = cachedItems;\n\t    }\n\t  }]);\n\t\n\t  return memoizer;\n\t}();\n\t\n\tvar hamstersMemoizer = new memoizer();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersMemoizer;\n\t}\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _data = __webpack_require__(1);\n\t\n\tvar _data2 = _interopRequireDefault(_data);\n\t\n\tvar _habitat = __webpack_require__(2);\n\t\n\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\n\tvar _logger = __webpack_require__(3);\n\t\n\tvar _logger2 = _interopRequireDefault(_logger);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar pool = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function pool() {\n\t    _classCallCheck(this, pool);\n\t\n\t    this.tasks = [];\n\t    this.threads = [];\n\t    this.running = [];\n\t    this.pending = [];\n\t    this.fetchHamster = this.grabHamster;\n\t  }\n\t\n\t  /**\n\t  * @function grabHamster - Adds task to queue waiting for available thread\n\t  * @param {object} array - Provided data to execute logic on\n\t  * @param {object} task - Provided library functionality options for this task\n\t  * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t  * @param {function} wheel - Results from select hamster wheel\n\t  * @param {function} resolve - onSuccess method\n\t  * @param {function} reject - onError method\n\t  */\n\t\n\t\n\t  _createClass(pool, [{\n\t    key: 'addWorkToPending',\n\t    value: function addWorkToPending(array, task, persistence, wheel, resolve, reject) {\n\t      this.pending.push(arguments);\n\t    }\n\t\n\t    /**\n\t    * @function grabHamster - Invokes processing of next item in queue\n\t    * @param {object} item - Task to process\n\t    */\n\t\n\t  }, {\n\t    key: 'processQueue',\n\t    value: function processQueue(item, hamster) {\n\t      return this.runTask(hamster, item[0], item[1], item[2], item[3], item[4]);\n\t    }\n\t\n\t    /**\n\t    * @function grabHamster - Keeps track of threads running, scoped globally and to task\n\t    * @param {number} threadId - Id of thread\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    */\n\t\n\t  }, {\n\t    key: 'grabHamster',\n\t    value: function grabHamster(threadId, habitat) {\n\t      if (habitat.persistence) {\n\t        return this.threads[threadId];\n\t      }\n\t      return this.spawnHamster();\n\t    }\n\t\n\t    /**\n\t    * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {number} id - Id of thread to track\n\t    */\n\t\n\t  }, {\n\t    key: 'keepTrackOfThread',\n\t    value: function keepTrackOfThread(task, id) {\n\t      task.workers.push(id); //Keep track of threads scoped to current task\n\t      this.running.push(id); //Keep track of all currently running threads\n\t    }\n\t\n\t    /**\n\t    * @function registerTask - Adds task to execution pool based on id\n\t    * @param {number} id - Id of task to register\n\t    */\n\t\n\t  }, {\n\t    key: 'registerTask',\n\t    value: function registerTask(id) {\n\t      this.tasks.push(id);\n\t    }\n\t\n\t    /**\n\t    * @function scheduleTask - Adds new task to the system for execution\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Scaffold to execute login within\n\t    * @param {number} maxThreads - Maximum number of threads for this client\n\t    */\n\t\n\t  }, {\n\t    key: 'scheduleTask',\n\t    value: function scheduleTask(task, scope) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        var i = 0;\n\t        while (i < task.threads) {\n\t          _this.hamsterWheel(i, task, scope, resolve, reject);\n\t          i += 1;\n\t        }\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @function spawnHamsters - Spawns multiple new threads for execution\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    * @param {number} maxThreds - Max number of threads for this client\n\t    */\n\t\n\t  }, {\n\t    key: 'spawnHamsters',\n\t    value: function spawnHamsters(maxThreads) {\n\t      for (maxThreads; maxThreads > 0; maxThreads--) {\n\t        this.threads.push(this.spawnHamster());\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @function spawnHamster - Spawns a new thread for execution\n\t    * @return {object} WebWorker - New WebWorker thread using selected scaffold\n\t    */\n\t\n\t  }, {\n\t    key: 'spawnHamster',\n\t    value: function spawnHamster() {\n\t      var newWheel = _habitat2.default.selectHamsterWheel();\n\t      if (_habitat2.default.webWorker) {\n\t        return new _habitat2.default.SharedWorker(newWheel, 'SharedHamsterWheel');\n\t      }\n\t      return new _habitat2.default.Worker(newWheel);\n\t    }\n\t\n\t    /**\n\t    * @constructor\n\t    * @function task - Constructs a new task object from provided arguments\n\t    * @param {object} params - Provided library execution options\n\t    * @param {function} functionToRun - Function to execute\n\t    * @param {object} scope - Reference to main library context\n\t    * @return {object} new Hamsters.js task\n\t    */\n\t\n\t  }, {\n\t    key: 'task',\n\t    value: function task(params, functionToRun, scope, resolve, reject) {\n\t      this.id = scope.pool.tasks.length;\n\t      this.count = 0;\n\t      this.aggregate = params.aggregate || false;\n\t      this.workers = [];\n\t      this.memoize = params.memoize || false;\n\t      this.dataType = params.dataType ? params.dataType.toLowerCase() : null;\n\t      this.params = params;\n\t      // Do not modify function if we're running on the main thread for legacy fallback\n\t      this.threads = scope.habitat.legacy ? 1 : params.threads || 1;\n\t      this.hamstersJob = scope.habitat.legacy ? functionToRun : _data2.default.prepareJob(functionToRun);\n\t      // Determine sub array indexes, precalculate ahead of time so we can pull data only when executing on a thread \n\t      this.indexes = _data2.default.generateIndexes(this.params.array, this.threads);\n\t      this.onSuccess = resolve;\n\t      this.onError = reject;\n\t      this.createdAt = Date.now();\n\t      this.completedAt = null;\n\t    }\n\t\n\t    /**\n\t    * @function hamsterWheel - Runs function using thread\n\t    * @param {object} array - Provided data to execute logic on\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    * @param {function} resolve - onSuccess method\n\t    * @param {function} reject - onError method\n\t    */\n\t\n\t  }, {\n\t    key: 'runTask',\n\t    value: function runTask(hamster, index, task, scope, resolve, reject) {\n\t      var threadId = this.running.length;\n\t      var hamsterFood = _data2.default.prepareMeal(index, task);\n\t      this.registerTask(task.id);\n\t      this.keepTrackOfThread(task, threadId);\n\t      if (_habitat2.default.legacy) {\n\t        _habitat2.default.legacyWheel(hamsterFood, resolve, reject);\n\t      } else {\n\t        this.trainHamster(task.count, task, hamster, scope, resolve, reject);\n\t        _data2.default.feedHamster(hamster, hamsterFood, scope.habitat);\n\t      }\n\t      task.count += 1; //Increment count, thread is running\n\t    }\n\t\n\t    /**\n\t    * @function hamsterWheel - Runs or queues function using threads\n\t    * @param {object} array - Provided library functionality options for this task\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    * @param {function} resolve - onSuccess method\n\t    * @param {function} reject - onError method\n\t    */\n\t\n\t  }, {\n\t    key: 'hamsterWheel',\n\t    value: function hamsterWheel(thread, task, scope, resolve, reject) {\n\t      var index = task.indexes[thread];\n\t      if (scope.maxThreads === this.running.length) {\n\t        return this.addWorkToPending(index, task, scope, resolve, reject);\n\t      }\n\t      var hamster = this.grabHamster(this.running.length, scope.habitat);\n\t      this.runTask(hamster, index, task, scope, resolve, reject);\n\t    }\n\t\n\t    /**\n\t    * @function returnOutputAndRemoveTask - gathers thread outputs into final result\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {function} resolve - onSuccess method\n\t    */\n\t\n\t  }, {\n\t    key: 'returnOutputAndRemoveTask',\n\t    value: function returnOutputAndRemoveTask(task, resolve) {\n\t      var output = _data2.default.getOutput(task);\n\t      if (task.sort) {\n\t        output = _data2.default.sortOutput(output, task.sort);\n\t      }\n\t      task.completedAt = Date.now();\n\t      var returnData = {\n\t        threads: task.threads,\n\t        dataType: task.dataType,\n\t        memoize: task.memoize,\n\t        indexes: task.indexes,\n\t        aggregate: task.aggregate,\n\t        createdAt: task.createdAt,\n\t        completedAt: task.completedAt,\n\t        results: output\n\t      };\n\t      this.tasks[task.id] = null; //Clean up our task, not needed any longer\n\t      resolve(returnData);\n\t    }\n\t\n\t    /**\n\t    * @function trainHamster - Trains thread in how to behave\n\t    * @param {number} threadId - Internal use id for this thread\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {worker} hamster - Thread to train\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} resolve - onSuccess method\n\t    * @param {function} reject - onError method\n\t    */\n\t\n\t  }, {\n\t    key: 'checkQueueOrKillThread',\n\t    value: function checkQueueOrKillThread(scope, hamster) {\n\t      if (this.pending.length !== 0) {\n\t        //If work is pending, get it started before doing heavy data merge..keep cpu busy not waiting\n\t        this.processQueue(this.pending.shift(), hamster);\n\t      } else if (!scope.habitat.persistence && !scope.habitat.webWorker) {\n\t        hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @function processThreadOutput - Handles output data from thread\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {number} threadId - Internal use id for this thread\n\t    * @param {worker} hamster - Thread to train\n\t    * @param {function} resolve - onSuccess method\n\t    */\n\t\n\t  }, {\n\t    key: 'processThreadOutput',\n\t    value: function processThreadOutput(task, threadId, results, resolve) {\n\t      _data2.default.mergeOutputData(task, threadId, results); //Merge results into data array as the thread returns, merge immediately don't wait\n\t      if (task.workers.length === 0 && task.count === task.threads) {\n\t        this.returnOutputAndRemoveTask(task, resolve);\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @function trainHamster - Trains thread in how to behave\n\t    * @param {number} threadId - Internal use id for this thread\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {worker} hamster - Thread to train\n\t    * @param {function} resolve - onSuccess method\n\t    * @param {function} reject - onError method\n\t    */\n\t\n\t  }, {\n\t    key: 'trainHamster',\n\t    value: function trainHamster(threadId, task, hamster, scope, resolve, reject) {\n\t      var pool = this;\n\t      // Handle successful response from a thread\n\t      function onThreadResponse(message) {\n\t        var results = message.data;\n\t        pool.running.splice(pool.running.indexOf(threadId), 1); //Remove thread from running pool\n\t        task.workers.splice(task.workers.indexOf(threadId), 1); //Remove thread from task running pool\n\t        pool.checkQueueOrKillThread(scope, hamster);\n\t        pool.processThreadOutput(task, threadId, results, resolve);\n\t      }\n\t      // Handle error response from a thread\n\t      function onThreadError(error) {\n\t        _logger2.default.errorFromThread(error, reject);\n\t      }\n\t      // Register on message/error handlers\n\t      if (_habitat2.default.webWorker) {\n\t        hamster.port.onmessage = onThreadResponse;\n\t        hamster.port.onmessageerror = onThreadError;\n\t        hamster.port.onerror = onThreadError;\n\t      } else {\n\t        hamster.onmessage = onThreadResponse;\n\t        hamster.onmessageerror = onThreadError;\n\t        hamster.onerror = onThreadError;\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return pool;\n\t}();\n\t\n\tvar hamsterPool = new pool();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamsterPool;\n\t}\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar wheel = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function wheel() {\n\t    _classCallCheck(this, wheel);\n\t\n\t    this.worker = this.workerScaffold;\n\t    this.regular = this.regularScaffold;\n\t    this.legacy = this.legacyScaffold;\n\t  }\n\t\n\t  /**\n\t  * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n\t  */\n\t\n\t\n\t  _createClass(wheel, [{\n\t    key: 'workerScaffold',\n\t    value: function workerScaffold() {\n\t      'use strict';\n\t\n\t      if (typeof self === 'undefined') {\n\t        self = global || window || this;\n\t      }\n\t\n\t      self.params = {};\n\t      self.rtn = {};\n\t\n\t      addEventListener('connect', function (incomingConnection) {\n\t        var port = incomingConnection.ports[0];\n\t        port.start();\n\t        port.addEventListener('message', function (incomingMessage) {\n\t          params = incomingMessage.data;\n\t          rtn = {\n\t            data: [],\n\t            dataType: params.dataType\n\t          };\n\t          if (params.importScripts) {\n\t            self.importScripts(params.importScripts);\n\t          }\n\t          eval(\"(\" + params.hamstersJob + \")\")();\n\t          port.postMessage(rtn);\n\t        }, false);\n\t      }, false);\n\t    }\n\t\n\t    /**\n\t    * @function workerScaffold - Provides worker body for library functionality\n\t    */\n\t\n\t  }, {\n\t    key: 'regularScaffold',\n\t    value: function regularScaffold() {\n\t      'use strict';\n\t\n\t      if (typeof self === 'undefined') {\n\t        var _self = global || window || this;\n\t      }\n\t\n\t      self.params = {};\n\t      self.rtn = {};\n\t\n\t      function prepareReturn(returnObject) {\n\t        var dataType = returnObject.dataType;\n\t        if (dataType) {\n\t          returnObject.data = typedArrayFromBuffer(dataType, returnObject.data);\n\t        }\n\t        return returnObject;\n\t      }\n\t\n\t      function typedArrayFromBuffer(dataType, buffer) {\n\t        var types = {\n\t          'uint32': Uint32Array,\n\t          'uint16': Uint16Array,\n\t          'uint8': Uint8Array,\n\t          'uint8clamped': Uint8ClampedArray,\n\t          'int32': Int32Array,\n\t          'int16': Int16Array,\n\t          'int8': Int8Array,\n\t          'float32': Float32Array,\n\t          'float64': Float64Array\n\t        };\n\t        if (!types[dataType]) {\n\t          return buffer;\n\t        }\n\t        return new types[dataType](buffer);\n\t      }\n\t\n\t      function prepareTransferBuffers(hamsterFood) {\n\t        var buffers = [];\n\t        var key = null;\n\t        for (key in hamsterFood) {\n\t          if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n\t            if (hamsterFood[key].buffer) {\n\t              buffers.push(hamsterFood[key].buffer);\n\t            } else if (Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n\t              buffers.push(new ArrayBuffer(hamsterFood[key]));\n\t            }\n\t          }\n\t        }\n\t        return buffers;\n\t      }\n\t\n\t      self.onmessage = function (incomingMessage) {\n\t        params = incomingMessage.data;\n\t        rtn = {\n\t          data: [],\n\t          dataType: params.dataType ? params.dataType.toLowerCase() : null\n\t        };\n\t        if (params.importScripts) {\n\t          self.importScripts(params.importScripts);\n\t        }\n\t        new Function(params.hamstersJob)();\n\t        postMessage(prepareReturn(rtn), prepareTransferBuffers(rtn));\n\t      };\n\t    }\n\t\n\t    /**\n\t    * @function legacyScaffold - Provides library functionality for legacy devices\n\t    */\n\t\n\t  }, {\n\t    key: 'legacyScaffold',\n\t    value: function legacyScaffold(params, resolve) {\n\t      var _this = this;\n\t\n\t      setTimeout(function () {\n\t        if (typeof self === 'undefined') {\n\t          var self = global || window || _this;\n\t        }\n\t        self.params = params;\n\t        self.rtn = {\n\t          data: []\n\t        };\n\t        params.hamstersJob();\n\t        resolve(rtn);\n\t      }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n\t    }\n\t  }]);\n\t\n\t  return wheel;\n\t}();\n\t\n\t;\n\t\n\tvar hamstersWheel = new wheel();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersWheel;\n\t}\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _version = __webpack_require__(4);\n\t\n\tvar _version2 = _interopRequireDefault(_version);\n\t\n\tvar _habitat = __webpack_require__(2);\n\t\n\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\n\tvar _pool = __webpack_require__(6);\n\t\n\tvar _pool2 = _interopRequireDefault(_pool);\n\t\n\tvar _data = __webpack_require__(1);\n\t\n\tvar _data2 = _interopRequireDefault(_data);\n\t\n\tvar _logger = __webpack_require__(3);\n\t\n\tvar _logger2 = _interopRequireDefault(_logger);\n\t\n\tvar _memoizer = __webpack_require__(5);\n\t\n\tvar _memoizer2 = _interopRequireDefault(_memoizer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar hamstersjs = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function hamstersjs() {\n\t    _classCallCheck(this, hamstersjs);\n\t\n\t    this.version = _version2.default;\n\t    this.maxThreads = _habitat2.default.logicalThreads;\n\t    this.habitat = _habitat2.default;\n\t    this.data = _data2.default;\n\t    this.pool = _pool2.default;\n\t    this.logger = _logger2.default;\n\t    this.memoizer = _memoizer2.default;\n\t    this.run = this.hamstersRun;\n\t    this.promise = this.hamstersPromise;\n\t    this.init = this.initializeLibrary;\n\t  }\n\t\n\t  /**\n\t  * @function initializeLibrary - Prepares & initializes Hamsters.js library\n\t  * @param {object} startOptions - Provided library functionality options\n\t  */\n\t\n\t\n\t  _createClass(hamstersjs, [{\n\t    key: 'initializeLibrary',\n\t    value: function initializeLibrary(startOptions) {\n\t      if (typeof startOptions !== 'undefined') {\n\t        this.processStartOptions(startOptions);\n\t      }\n\t      if (!this.habitat.legacy && this.habitat.persistence === true) {\n\t        _pool2.default.spawnHamsters(this.maxThreads);\n\t      }\n\t      this.logger.info('Initialized using up to ' + this.maxThreads + ' threads.');\n\t      delete this.init;\n\t    }\n\t\n\t    /**\n\t    * @function processStartOptions - Adjusts library functionality based on provided options\n\t    * @param {object} startOptions - Provided library functionality options\n\t    */\n\t\n\t  }, {\n\t    key: 'processStartOptions',\n\t    value: function processStartOptions(startOptions) {\n\t      // Add options to override library environment behavior\n\t      var habitatKeys = ['worker', 'sharedworker', 'legacy', 'webworker', 'reactnative', 'atomics', 'proxies', 'transferrable', 'browser', 'shell', 'node', 'debug', 'persistence', 'importscripts'];\n\t      var key = null;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = Object.keys(startOptions)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          key = _step.value;\n\t\n\t          if (habitatKeys.indexOf(key.toLowerCase()) !== -1) {\n\t            this.habitat[key] = startOptions[key];\n\t          } else {\n\t            this[key] = startOptions[key];\n\t          }\n\t        }\n\t        // Ensure legacy mode is disabled when we pass a third party worker library\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (typeof this.habitat.Worker === 'function' && startOptions['legacy'] !== true) {\n\t        this.habitat.legacy = false;\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @async\n\t    * @function hamstersPromise - Calls library functionality using async promises\n\t    * @param {object} params - Provided library execution options\n\t    * @param {function} functionToRun - Function to execute\n\t    * @return {array} Results from functionToRun.\n\t    */\n\t\n\t  }, {\n\t    key: 'hamstersPromise',\n\t    value: function hamstersPromise(params, functionToRun) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        var task = new _pool2.default.task(params, functionToRun, _this, resolve, reject);\n\t        _pool2.default.scheduleTask(task, _this).then(function (results) {\n\t          task.onSuccess(results);\n\t        }).catch(function (error) {\n\t          _logger2.default.error(error.message, task.onError);\n\t        });\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @async\n\t    * @function hamstersRun - Calls library functionality using async callbacks\n\t    * @param {object} params - Provided library execution options\n\t    * @param {function} functionToRun - Function to execute\n\t    * @param {function} onSuccess - Function to call upon successful execution\n\t    * @param {function} onError - Function to call upon execution failure\n\t    * @return {array} Results from functionToRun.\n\t    */\n\t\n\t  }, {\n\t    key: 'hamstersRun',\n\t    value: function hamstersRun(params, functionToRun, onSuccess, onError) {\n\t      var task = new _pool2.default.task(params, functionToRun, this, onSuccess, onError);\n\t      _pool2.default.scheduleTask(task, this).then(function (results) {\n\t        task.onSuccess(results);\n\t      }).catch(function (error) {\n\t        _logger2.default.error(error.message, task.onError);\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return hamstersjs;\n\t}();\n\t\n\tvar hamsters = new hamstersjs();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamsters;\n\t}\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// hamsters.node.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 081a6979837c64ce1e42","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersHabitat from './habitat';\nimport hamstersLogger from './logger';\n\nclass data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.randomArray = this.randomArray;\n    this.generateIndexes = this.determineSubArrayIndexes;\n    this.createBlob = this.createDataBlob;\n    this.generateWorkerBlob = this.generateWorkerBlob;\n    this.processDataType = this.processDataType;\n    this.sortOutput = this.sortArray;\n    this.getOutput = this.prepareOutput;\n    this.prepareJob = this.prepareFunction;\n    this.feedHamster = this.messageWorker;\n  }\n\n  /**\n  * @function messageWorker - Prepares message to send to thread\n  * @param {worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorker(hamster, hamsterFood) {\n    if(hamstersHabitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (hamstersHabitat.ie10) {\n      return hamster.postMessage(hamsterFood);\n    }\n    if (hamstersHabitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    return hamster.postMessage(hamsterFood, this.prepareTransferBuffers(hamsterFood, hamstersHabitat.transferrable));\n  }\n\n  /**\n  * @function prepareTransferBuffers - Prepares transferrable buffers for faster message passing\n  * @param {object} hamsterFood - Message to send to thread\n  */\n  prepareTransferBuffers(hamsterFood, transferrable) {\n    let buffers = [];\n    let key = null;\n    if(transferrable) {\n      for (key of Object.keys(hamsterFood)) {\n        if(hamsterFood[key].buffer) {\n          buffers.push(hamsterFood[key].buffer);\n        } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n          buffers.push(new ArrayBuffer(hamsterFood[key]));\n        }\n      }\n    }\n    return buffers;\n  }\n\n  /**\n  * @function prepareMeal - Prepares message to send to a thread and invoke execution\n  * @param {object} threadArray - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @return {object} hamsterFood - Prepared message to send to a thread\n  */\n  prepareMeal(index, task) {\n    let threadArray = this.getSubArrayUsingIndex(task.params.array, index);\n    let hamsterFood = {\n      array: threadArray\n    };\n    for (var key in task.params) {\n      if (task.params.hasOwnProperty(key) && ['array', 'threads'].indexOf(key) === -1) {\n        hamsterFood[key] = task.params[key];\n      }\n    }\n    return hamsterFood;\n  }\n\n  /**\n  * @function prepareFunction - Prepares transferrable buffers for faster message passing\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareFunction(functionBody) {\n    functionBody = String(functionBody);\n    if (!hamstersHabitat.webWorker) {\n      let startingIndex = (functionBody.indexOf(\"{\") + 1);\n      let endingIndex = (functionBody.length - 1);\n      return functionBody.substring(startingIndex, endingIndex);\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates blob uri for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    let hamsterBlob = this.createDataBlob('(' + String(workerLogic) + ')();');\n    let dataBlobURL = URL.createObjectURL(hamsterBlob);\n    return dataBlobURL;\n  }\n\n  /**\n  * @function mergeOutputData - Merges output data into data array, using indexes\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} results - Message object containing results from thread\n  */\n  mergeOutputData(task, threadId, results) {\n    var data = hamstersHabitat.reactNative ? JSON.parse(results.data) : results.data;\n    var arrayIndex = task.indexes[threadId].start; //Starting value index for subarray to merge\n    for (var i = 0; i < data.length; i++) {\n      task.params.array[arrayIndex] = data[i];\n      arrayIndex++;\n    }\n  }\n\n  /**\n  * @function processDataType - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  processDataType(dataType, buffer, transferrable) {\n    if(transferrable) {\n      return this.typedArrayFromBuffer(dataType, buffer);\n    }\n    return buffer;\n  }\n\n  /**\n  * @function prepareOutput - Prepares final task output\n  * @param {task} buffer - Task to prepare output for\n  */\n  prepareOutput(task) {\n    return task.params.array;\n  }\n\n  /**\n  * @function sortArray - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortArray(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'uint32': Uint32Array,\n      'uint16': Uint16Array,\n      'uint8': Uint8Array,\n      'uint8clamped': Uint8ClampedArray,\n      'int32': Int32Array,\n      'int16': Int16Array,\n      'int8': Int8Array,\n      'float32': Float32Array,\n      'float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return dataType;\n    }\n    return new types[dataType](buffer);\n  }\n\n\n  /**\n  * @function createDataBlob - Attempts to locate data blob builder, vender prefixes galore\n  */\n  locateBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return hamstersLogger.error('Environment does not support data blobs!');\n  }\n\n  /**\n  * @function createDataBlob - Creates new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function randomArray - Creates new random array\n  * @param {number} count - Number of random elements in array\n  * @param {function} onSuccess - onSuccess callback\n  */\n  randomArray(count, onSuccess) {\n    var randomArray = [];\n    while(count > 0) {\n      randomArray.push(Math.round(Math.random() * (100 - 1) + 1));\n      count -= 1;\n    }\n    onSuccess(randomArray);\n  }\n\n  /**\n  * @function determineSubArrayIndexes - Creates object containing starting and end value indexs for subarrays\n  * @param {array} array - Array to use\n  * @param {number} n - Number of subarrays to create indexes for\n  */\n  determineSubArrayIndexes(array, n) {\n    let i = 0;\n    let size = Math.ceil(array.length/n);\n    let indexes = [];\n    while(i < array.length) {\n      indexes.push({start: i, end: (i += size)});\n    }\n    return indexes;\n  }\n\n  /**\n  * @function getSubArrayUsingIndex - Fetches subarray from array using pre-determined start and end index\n  * @param {array} array - Array to split\n  * @param {index} object - Object containing index of start and end values for subarray\n  */\n  getSubArrayUsingIndex(array, index) {\n    if(array.slice) {\n      return array.slice(index['start'], index['end']);\n    }\n    return array.subarray(index['start'], index['end']);\n  }\n}\n\nvar hamstersData = new data();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersData;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/data.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersData from './data';\nimport hamstersWheel from './wheel';\n\nclass habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.debug = false;\n    this.importScripts = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.legacy = this.isLegacyEnvironment();\n    this.legacyWheel = hamstersWheel.legacy,\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferrable = this.supportsTransferrableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE10 = !this.isNode() && !this.isReactNative() && this.isInternetExplorer(10);\n    this.logicalThreads = this.determineGlobalThreads();\n    this.Worker = this.locateWorkerObject();\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.selectHamsterWheel = this.selectHamsterWheel;\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(typeof navigator !== 'undefined') {\n      if(typeof navigator.hardwareConcurrency !== 'undefined') {\n        max = navigator.hardwareConcurrency;\n      }\n      if(max > 20 && navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n        max = 20;\n      }\n    }\n    return max;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return typeof Worker !== 'undefined' ? Worker : false;\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return typeof SharedWorker !== 'undefined' ? SharedWorker : false;\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return typeof window === \"object\";\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer(version) {\n    return (new RegExp('msie' + (!isNaN(version) ? ('\\\\s'+version) : ''), 'i').test(navigator.userAgent));\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser;\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a webworker\n  */\n  isWebWorker() {\n    return typeof importScripts === \"function\";\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is reactNative\n  */\n  isReactNative() {\n    return !this.isNode() && typeof global === 'object' && !this.browser;\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return this.browser && !this.isNode() && !this.isWebWorker() && !this.isReactNative();\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = false;\n    // Force legacy mode for known devices that don't support threading\n    if (this.browser && !this.isReactNative()) {\n      isLegacy = this.isLegacyDevice();\n    }\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy || !!!this.locateWorkerObject();\n  }\n\n  isLegacyDevice() {\n    let legacyDevice = false;\n    let userAgent = navigator.userAgent;\n    let lacksWorkerSupport = (typeof this.Worker === 'undefined');\n    let legacyAgents = ['Kindle/3.0', 'Mobile/8F190', 'IEMobile'];\n    if (lacksWorkerSupport || legacyAgents.indexOf(userAgent) !== -1) {\n      legacyDevice = true;\n    }\n    return legacyDevice;\n  }\n\n  supportsSharedWorkers() {\n    let supports = false;\n    try {\n      let workerBlob = hamstersData.generateBlob();\n      let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      supports = true;\n    } catch (e) {\n      supports = false;\n    }\n    return supports;\n  }\n\n  /**\n  * @function supportsTransferrableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferrableObjects() {\n    return typeof Uint8Array !== 'undefined';\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports shared array buffers\n  */\n  supportsAtomicOperations() {\n    return typeof SharedArrayBuffer !== 'undefined';\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports proxy objects\n  */\n  supportsProxies() {\n    return typeof Proxy !== 'undefined';\n  }\n\n  /**\n  * @function scheduleTask - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.isIE10) {\n      return './common/hamstersWheel.js';\n    }\n    if(this.reactNative) {\n      return './common/rnHamstersWheel.js';\n    }\n    if(this.webWorker) {\n      return hamstersWheel.worker;\n    }\n    if (this.node) {\n      return hamstersWheel.regular;\n    }\n    return hamstersData.generateWorkerBlob(hamstersWheel.regular);\n  }\n}\n\nvar hamstersHabitat = new habitat();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersHabitat;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/habitat.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersVersion from './version';\n\nclass logger {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.logBook = {\n      error: [], \n      warning: [], \n      info: []\n    };\n    this.info = this.infoLog;\n    this.warning = this.warningLog;\n    this.error = this.errorLog;\n    this.errorFromThread = this.errorFromThread;\n    this.saveLogEntry = this.saveToLogBook;\n    this.getLogEntries = this.fetchLogBook;\n    this.createAndSaveStampedMessage = this.generateTimeStampedMessage;\n    this.searchLogEntries = this.searchLogBook;\n  }\n\n  infoLog(message) {\n    let timeStampedMessage = this.createAndSaveStampedMessage('Info', message);\n    console.info(timeStampedMessage);\n  }\n\n  warningLog(message) {\n    let timeStampedMessage = this.createAndSaveStampedMessage('Warning', message);\n    console.warn(timeStampedMessage);\n  }\n\n  errorLog(message, reject) {\n    let timeStampedMessage = this.createAndSaveStampedMessage('Error', message);\n    console.error(timeStampedMessage);\n    if(reject) {\n      reject(timeStampedMessage);\n    } else {\n      return timeStampedMessage;\n    }\n  }\n\n  generateTimeStampedMessage(type, message) {\n    let record = `Hamsters.js v${hamstersVersion} ${type}: ${message} @ ${Date.now()}`\n    this.saveLogEntry(type.toLowerCase(), record);\n    return record;\n  }\n\n  errorFromThread(error, reject) {\n    let errorMessage = `#${error.lineno} in ${error.filename}: ${error.message}`;\n    this.errorLog(errorMessage, reject);\n  }\n\n  saveToLogBook(eventType, message) {\n    this.logBook[eventType].push(message);\n  }\n\n  fetchLogBook(eventType) {\n    if(eventType) {\n      return this.logBook[eventType];\n    }\n    return this.logBook;\n  }\n\n  findStringInLogBook(logBookEntries, searchString) {\n    let searchResults = [];\n    let i = 0;\n    for (i; i < logBookEntries.length; i++) {\n      if(logBookEntries[i].indexOf(searchString) !== -1) {\n        searchResults.push(logBookEntries[i]);\n      }\n    }\n    return searchResults;\n  }\n\n  findStringInLogBookAllTypes(logBook, searchString) {\n    let searchResults = [];\n    let key, eventTypeResults, tmpEntries = null;\n    for(key in logBook) {\n      if(logBook.hasOwnProperty(key)) {\n        tmpEntries = logBook[key];\n        eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n        for (var i = eventTypeResults.length - 1; i >= 0; i--) {\n          searchResults.push(eventTypeResults[i])\n        }\n      }\n    }\n    return searchResults;\n  }\n\n  searchLogBook(searchString, eventType) {\n    let finalResults = [];\n    if(eventType) {\n      finalResults = this.findStringInLogBook(this.logBook[eventType], searchString);\n    } else {\n      finalResults = this.findStringInLogBookAllTypes(this.logBook, searchString);\n    }\n    return {\n      total: finalResults.length,\n      results: finalResults\n    };\n  }   \n}\n\nvar hamstersLogger = new logger();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersLogger;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/logger.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nconst majorVersion = 5;\nconst minorVersion = 1;\nconst patchVersion = 3;\nconst hamstersVersion = `${majorVersion}.${minorVersion}.${patchVersion}`;\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersVersion;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/version.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nclass memoizer {\n  \n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.maxCacheEntries = 25;\n    this.cacheEntries = [];\n    this.itemCached = this.isItemCached;\n    this.fetchItem = this.fetchItemFromCache;\n    this.saveItem = this.saveItemToCache;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {object} input - Provided library execution options\n  * @param {method} functionToRun - Function to execute\n  * @return {object} Execution results from cache, or false\n  */\n  isItemCached(input, method) {\n  \treturn !!(this.fetchItem({fn: method, data: input})) || false;\n  }\n\n  /**\n  * @function fetchItemFromCache - Fetches cache item from cache\n  * @param {object} cacheItem - Cache item to fetch\n  * @return {object} CacheResults, or false\n  */\n  fetchItemFromCache(cacheItem) {\n  \tlet cachedResult = null;\n    let key = null;\n    for(key of Object.keys(this.cacheEntries)) {\n      if((cacheItem[key].fn === cacheItem.fn) && (cacheItem[key].input === cacheItem.data)) {\n        cachedResult = cacheItem[key].input;\n      }\n    }\n  \treturn cachedResult || false;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {method} functionToRun - Function to execute\n  * @param {object} data - Execution results to cache\n  */\n  saveItemToCache(method, data, maxCacheEntries) {\n  \tlet itemToCache = {\n  \t\tfn: method,\n  \t\tinput: data\n  \t};\n  \tlet cachedItems = this.cacheEntries;\n  \tif(cachedItems.length < maxCacheEntries) {\n  \t\tcachedItems.push(itemToCache);\n  \t} else {\n  \t\tcachedItems.splice(0, 0, itemToCache); \n  \t}\n  \tthis.cacheEntries = cachedItems;\n  }\n}\n\nvar hamstersMemoizer = new memoizer();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersMemoizer;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/memoizer.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersData from './data';\nimport hamstersHabitat from './habitat';\nimport hamstersLogger from './logger';\n\nclass pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.tasks = [];\n    this.threads = [];\n    this.running = [];\n    this.pending = [];\n    this.fetchHamster = this.grabHamster;\n  }\n\n  /**\n  * @function grabHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(array, task, persistence, wheel, resolve, reject) {\n  \tthis.pending.push(arguments);\n  }\n\n  /**\n  * @function grabHamster - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueue(item, hamster) {\n  \treturn this.runTask(hamster, item[0], item[1], item[2], item[3], item[4]);\n  }\n\n  /**\n  * @function grabHamster - Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  grabHamster(threadId, habitat) {\n    if(habitat.persistence) {\n      return this.threads[threadId];\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    task.workers.push(id); //Keep track of threads scoped to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function registerTask - Adds task to execution pool based on id\n  * @param {number} id - Id of task to register\n  */\n  registerTask(id) {\n    this.tasks.push(id);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task, scope) {\n    return new Promise((resolve, reject) => {\n      let i = 0;\n      while (i < task.threads) {\n        this.hamsterWheel(i, task, scope, resolve, reject);\n        i += 1;\n      }\n    });\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    for (maxThreads; maxThreads > 0; maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} WebWorker - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    let newWheel = hamstersHabitat.selectHamsterWheel();\n    if (hamstersHabitat.webWorker) {\n      return new hamstersHabitat.SharedWorker(newWheel, 'SharedHamsterWheel');\n    }\n    return new hamstersHabitat.Worker(newWheel);\n  }\n\n  /**\n  * @constructor\n  * @function task - Constructs a new task object from provided arguments\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {object} scope - Reference to main library context\n  * @return {object} new Hamsters.js task\n  */\n  task(params, functionToRun, scope, resolve, reject) {\n    this.id = scope.pool.tasks.length;\n    this.count = 0;\n    this.aggregate = (params.aggregate || false);\n    this.workers = [];\n    this.memoize = (params.memoize || false);\n    this.dataType = (params.dataType ? params.dataType.toLowerCase() : null);\n    this.params = params;\n    // Do not modify function if we're running on the main thread for legacy fallback\n    this.threads = (scope.habitat.legacy ? 1 : (params.threads || 1));\n    this.hamstersJob = (scope.habitat.legacy ? functionToRun : hamstersData.prepareJob(functionToRun));\n    // Determine sub array indexes, precalculate ahead of time so we can pull data only when executing on a thread \n    this.indexes = hamstersData.generateIndexes(this.params.array, this.threads);\n    this.onSuccess = resolve;\n    this.onError = reject;\n    this.createdAt = Date.now();\n    this.completedAt = null;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, task, scope, resolve, reject) {\n  \tlet threadId = this.running.length;\n    let hamsterFood = hamstersData.prepareMeal(index, task);\n    this.registerTask(task.id);\n    this.keepTrackOfThread(task, threadId);\n    if(hamstersHabitat.legacy) {\n      hamstersHabitat.legacyWheel(hamsterFood, resolve, reject);\n    } else {\n      this.trainHamster(task.count, task, hamster, scope, resolve, reject);\n      hamstersData.feedHamster(hamster, hamsterFood, scope.habitat);\n    }\n    task.count += 1; //Increment count, thread is running\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(thread, task, scope, resolve, reject) {\n    let index = task.indexes[thread];\n    if(scope.maxThreads === this.running.length) {\n      return this.addWorkToPending(index, task, scope, resolve, reject);\n    }\n    let hamster = this.grabHamster(this.running.length, scope.habitat);\n    this.runTask(hamster, index, task, scope, resolve, reject);\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    let output = hamstersData.getOutput(task);\n    if (task.sort) {\n      output = hamstersData.sortOutput(output, task.sort);\n    }\n    task.completedAt = Date.now();\n    let returnData = {\n      threads: task.threads,\n      dataType: task.dataType,\n      memoize: task.memoize,\n      indexes: task.indexes,\n      aggregate: task.aggregate,\n      createdAt: task.createdAt,\n      completedAt: task.completedAt,\n      results: output\n    };\n    this.tasks[task.id] = null; //Clean up our task, not needed any longer\n    resolve(returnData);\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  checkQueueOrKillThread(scope, hamster) {\n    if (this.pending.length !== 0) { //If work is pending, get it started before doing heavy data merge..keep cpu busy not waiting\n      this.processQueue(this.pending.shift(), hamster);\n    } else if (!scope.habitat.persistence && !scope.habitat.webWorker) {\n      hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n    }\n  }\n\n  /**\n  * @function processThreadOutput - Handles output data from thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Internal use id for this thread\n  * @param {worker} hamster - Thread to train\n  * @param {function} resolve - onSuccess method\n  */\n  processThreadOutput(task, threadId, results, resolve) {\n    hamstersData.mergeOutputData(task, threadId, results); //Merge results into data array as the thread returns, merge immediately don't wait\n    if (task.workers.length === 0 && task.count === task.threads) { \n      this.returnOutputAndRemoveTask(task, resolve);\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(threadId, task, hamster, scope, resolve, reject) {\n    let pool = this;\n    // Handle successful response from a thread\n    function onThreadResponse(message) {\n      let results = message.data;\n      pool.running.splice(pool.running.indexOf(threadId), 1); //Remove thread from running pool\n    \ttask.workers.splice(task.workers.indexOf(threadId), 1); //Remove thread from task running pool\n      pool.checkQueueOrKillThread(scope, hamster);\n      pool.processThreadOutput(task, threadId, results, resolve);\n    }\n    // Handle error response from a thread\n    function onThreadError(error) {\n      hamstersLogger.errorFromThread(error, reject);\n    }\n    // Register on message/error handlers\n    if (hamstersHabitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = onThreadError;\n      hamster.port.onerror = onThreadError;\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = onThreadError;\n      hamster.onerror = onThreadError;\n    }\n  }\n}\n\nvar hamsterPool = new pool();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsterPool;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/pool.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nclass wheel {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.worker = this.workerScaffold;\n    this.regular = this.regularScaffold;\n    this.legacy = this.legacyScaffold;\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n  */\n  workerScaffold() {\n    'use strict';\n\n    if(typeof self === 'undefined') {\n      self = (global || window || this);\n    }\n\n    self.params = {};\n    self.rtn = {};\n\n    addEventListener('connect', (incomingConnection) => {\n      const port = incomingConnection.ports[0];\n      port.start();\n      port.addEventListener('message', (incomingMessage) => {\n        params = incomingMessage.data;\n        rtn = {\n          data: [],\n          dataType: params.dataType\n        };\n        if(params.importScripts) {\n          self.importScripts(params.importScripts);\n        }\n        eval(\"(\" + params.hamstersJob + \")\")();\n        port.postMessage(rtn);\n      }, false);\n    }, false);\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality\n  */\n  regularScaffold() {\n    'use strict';\n\n    if(typeof self === 'undefined') {\n      let self = (global || window || this);\n    }\n\n    self.params = {};\n    self.rtn = {};\n\n    function prepareReturn(returnObject) {\n      let dataType = returnObject.dataType;\n      if(dataType) {\n        returnObject.data = typedArrayFromBuffer(dataType, returnObject.data);\n      }\n      return returnObject;\n    }\n\n    function typedArrayFromBuffer(dataType, buffer) {\n      const types = {\n        'uint32': Uint32Array,\n        'uint16': Uint16Array,\n        'uint8': Uint8Array,\n        'uint8clamped': Uint8ClampedArray,\n        'int32': Int32Array,\n        'int16': Int16Array,\n        'int8': Int8Array,\n        'float32': Float32Array,\n        'float64': Float64Array\n      };\n      if (!types[dataType]) {\n        return buffer;\n      }\n      return new types[dataType](buffer);\n    }\n\n    function prepareTransferBuffers(hamsterFood) {\n      let buffers = [];\n      let key = null;\n      for (key in hamsterFood) {\n        if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n          if(hamsterFood[key].buffer) {\n            buffers.push(hamsterFood[key].buffer);\n          } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n            buffers.push(new ArrayBuffer(hamsterFood[key]));\n          }\n        }\n      }\n      return buffers;\n    }\n\n    self.onmessage = function(incomingMessage) {\n      params = incomingMessage.data;\n      rtn = {\n        data: [],\n        dataType: (params.dataType ? params.dataType.toLowerCase() : null)\n      };\n      if(params.importScripts) {\n        self.importScripts(params.importScripts);\n      }\n      new Function(params.hamstersJob)();\n      postMessage(prepareReturn(rtn), prepareTransferBuffers(rtn));\n    }\n  }\n\n  /**\n  * @function legacyScaffold - Provides library functionality for legacy devices\n  */\n  legacyScaffold(params, resolve) {\n    setTimeout(() => {\n      if(typeof self === 'undefined') {\n        var self = (global || window || this);\n      }\n      self.params = params;\n      self.rtn = {\n        data: []\n      };\n      params.hamstersJob();\n      resolve(rtn);\n    }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n  }\n};\n\nvar hamstersWheel = new wheel();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersWheel;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/wheel.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersVersion from './core/version';\nimport hamstersHabitat from './core/habitat';\nimport hamstersPool from './core/pool';\nimport hamstersData from './core/data';\nimport hamstersLogger from './core/logger';\nimport hamstersMemoizer from './core/memoizer';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.version = hamstersVersion;\n    this.maxThreads = hamstersHabitat.logicalThreads;\n    this.habitat = hamstersHabitat;\n    this.data = hamstersData;\n    this.pool = hamstersPool;\n    this.logger = hamstersLogger;\n    this.memoizer = hamstersMemoizer;\n    this.run = this.hamstersRun;\n    this.promise = this.hamstersPromise;\n    this.init = this.initializeLibrary;\n  }\n\n  /**\n  * @function initializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      this.processStartOptions(startOptions);\n    }\n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      hamstersPool.spawnHamsters(this.maxThreads);\n    }\n    this.logger.info(`Initialized using up to ${this.maxThreads} threads.`);\n    delete this.init;\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    // Add options to override library environment behavior\n    let habitatKeys = [\n      'worker', 'sharedworker',\n      'legacy', 'webworker',\n      'reactnative', 'atomics',\n      'proxies', 'transferrable',\n      'browser', 'shell', \n      'node', 'debug',\n      'persistence', 'importscripts'\n    ];\n    let key = null;\n    for (key of Object.keys(startOptions)) {\n      if (habitatKeys.indexOf(key.toLowerCase()) !== -1) {\n        this.habitat[key] = startOptions[key];\n      } else {\n        this[key] = startOptions[key];\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    if(typeof this.habitat.Worker === 'function' && startOptions['legacy'] !== true) {\n      this.habitat.legacy = false;\n    }\n  }\n\n\n\n  /**\n  * @async\n  * @function hamstersPromise - Calls library functionality using async promises\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @return {array} Results from functionToRun.\n  */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      let task = new hamstersPool.task(params, functionToRun, this, resolve, reject);\n      hamstersPool.scheduleTask(task, this).then((results) => {\n        task.onSuccess(results);\n      }).catch((error) => {\n        hamstersLogger.error(error.message, task.onError);\n      });\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {function} onSuccess - Function to call upon successful execution\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    let task = new hamstersPool.task(params, functionToRun, this, onSuccess, onError);\n    hamstersPool.scheduleTask(task, this).then((results) => {\n      task.onSuccess(results);\n    }).catch((error) => {\n      hamstersLogger.error(error.message, task.onError);\n    });\n  }\n}\n\nvar hamsters = new hamstersjs();\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsters;\n}\n\n\n// WEBPACK FOOTER //\n// ./hamsters.js"],"sourceRoot":""}